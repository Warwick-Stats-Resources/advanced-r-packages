{
  "hash": "8f7a6af2c7361898ddfad0aac87662e8",
  "result": {
    "markdown": "---\ntitle: Package Check and Documentation\nsubtitle: R Packages\nauthor: \n  - name: Heather Turner and Ella Kaye\n  - name: Department of Statistics, University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2023-06-21\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n- Check your package!\n- DESCRIPTION\n- README\n- Continuous Integration (CI)\n- Vignettes\n- NEW\n- Package website with pkgdown \n\n# Check you package! {.inverse}\n\n## R CMD check\n\n`R CMD check` is the command line utility provided by R to check R packages.\n\nIt checks that all the components are valid and consistent with each other, in particular:\n\n-   Metadata in DESCRIPTION\n-   Imports and exports in NAMESPACE\n-   `.Rd` files in `/man`\n\nIt will also run any examples and tests you have written.\n\n`devtools::check()` will run `R CMD check` in the background, with the results shown in the Build pane.\n\n::: notes\nNote that this doesn't check the correctness of code - this is the role of tests\n:::\n\n## Run `devtools::check()`\n\nYou will get lots of output. It will end with:\n\n```         \n-- R CMD check results ---------- animalsounds 0.0.0.9000 ----\nDuration: 9.3s\n\n> checking DESCRIPTION meta-information ... WARNING\n  Non-standard license specification:\n    `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\n  Standardizable: FALSE\n\n0 errors √ | 1 warnings x | 0 notes √\n```\n\nWe haven't yet specified a license for our package.\n\n::: notes\nOn running `check()` you may get an error if you are using a networked drive. There's a fix coming in a few slides.\n:::\n\n## Aside: in case of error\n\nOn running `devtools::check()` you may get an error of the form\n\n```         \nUpdating animalsounds documentation  \nError: The specified file is not readable: path-to\\animalsounds\\NAMESPACE  \n```\n\nThis can happen if your repo is on a networked drive.\n\nThis is covered in this [Stackoverflow question](https://stackoverflow.com/questions/40530968/overwriting-namespace-and-rd-with-roxygen2) and can be fixed.\n\n## Aside: a fix for networked drives\n\n1.  Save a copy of this file: [fix_for_networked_drives.R](../../R/fix_for_networked_drives.R)\n\n    Save it somewhere other than the `animalsounds` directory\n\n2.  Open the file from the `animalsounds` project session\n\n3.  Run the whole file\n\nYou should now find that `devtools::check()` proceeds normally.\n\n## Types of problem\n\n<br>\n\n|             |                                               |\n|-------------|-----------------------------------------------|\n| **ERROR**   | Must fix to get the code/example/test working |\n| **WARNING** | Fix if sharing with others                    |\n| **NOTE**    | Fix if submitting to CRAN                     |\n\n<br>\n\nIt is possible to submit to CRAN with a NOTE, but it's best avoided.\n\n::: notes\nNOTES best avoid for CRAN as they require a person to respond. One unavoidable case of a NOTE on CRAN submission: first submission of a package\n:::\n\n# DESCRIPTION {.inverse}\n\n::: {.notes}\nThe are two types of documentation: package level and function level.\n\nThe DESCRIPTION file provides some of the package level documentation (or metadata)\n:::\n\n## Metadata in `DESCRIPTION`\n\n- **Package**: The package name. The `changer` package can help you change the name!\n-  **Title**: One line, title case, with no period. Fewer than 65 characters.\n-  **Version**\n    - for release: MAJOR.MINOR.PATCH version.\n    - for development version building on version MAJOR.MINOR.PATCH, use: MAJOR.MINOR.PATCH.9000\n    - can be filled in with `usethis::use_version()`\n\n::: {.notes}\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\nMAJOR version when you make incompatible API changes,\nMINOR version when you add functionality in a backwards compatible manner, and\nPATCH version when you make backwards compatible bug fixes.\n\nWill see usethis::use_version() in session on publication\n:::\n   \n## Metadata in `DESCRIPTION`\n\n:::{.smaller90}\n- **Authors@R**: A call to `person()` that is run to create the Author field when the package tarball is built. \"aut\" means author, \"cre\" means creator (maintainer), \"ctb\" means contributor. \n\n  A placeholder call to `person()` is inserted in `DESCRIPTION` when a package is created with `usethis::create_package()` which can be edited directly:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  person(\"A\", \"Person\", email = \"a.person@email.com\", \n         role = c(\"aut\", \"cre\"),\n         comment = c(ORCID = \"0000-0001-2345-6789\"))\n  ```\n  :::\n\n\n  Alternatively, this can be overwritten with a call to `usethis::use_author()`:\n  \n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  use_author(\"A\", \"Person\", email = \"a.person@email.com\", \n       role = c(\"aut\", \"cre\"),\n       comment = c(ORCID = \"0000-0001-2345-6789\"))\n  ```\n  :::\n\n:::\n\n::: {.notes}\nusethis::use_author() is new in usethis 2.2.0\n:::\n\n## Metadata in `DESCRIPTION`\n\n-  **Description**: One paragraph describing what the package does. Keep the width of the paragraph to 80 characters; indent subsequent lines with 4 spaces.\n-  **License**: Will discuss later\n-  **Encoding**: How to encode text, use UTF-8 encoding.\n-  **LazyData**: If `true` data sets in the package are stored in a database during package installation and loaded from the database as required. Recommended if shipping data with package -- `usethis::use_data()` will set this for you.\n\n::: {.notes}\nusethis::create_package() sets UTF-8 encoding\n\nlazy loading means that data is only loaded if needed.\nThis means that they won’t occupy any memory until you use them.\ndo NOT include LazyData: true in DESCRIPTION unless you actually ship data in your package. \n:::\n\n## Open source licenses\n\nThere are three main open source licenses:\n\n- CC0: “public domain”, best for data packages.\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  usethis::use_cc0_license()\n  ```\n  :::\n\n- MIT: Free for anyone to do anything with (including bundling in closed source product).\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  usethis::use_mit_license()\n  ```\n  :::\n\n- GPL: Changes and bundles must also be GPL\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  usethis::use_gpl_license()\n  ```\n  :::\n\n  [If you are including someone else's GPL code directly, you must use GPL yourself.]{.smaller80}\n\n::: {.notes}\nhttps://bookdown.org/rdpeng/RProgDA/open-source-licensing.html\n\nsomewhat personal down to how important you consider open source to be and what you are happy with people doing with your code\n\nSuggest academic: GPL; community/other: MIT  \n:::\n\n## Proprietary packages\n\nYou can use `usethis::use_proprietary()` to make it clear that your package isn’t open source.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_proprietary(copyright_holder = \"ACME Ltd\")\n```\n:::\n\n\nIn DESCRIPTION:\n```\nLicense: file LICENSE\n```\nIn LICENSE:\n```\nCopyright 2023 ACME Ltd. All rights reserved.\n```\n\n## Licensing considerations at universities\n\n:::{.callout-note appearance=\"simple\"}\n[This slide is specific for The University of Warwick, but similar considerations are likely to be true at other Universities.]{.smaller80}\n:::\n\n:::{.smaller75}\n- Software is defined as a creative output (unlike scholarly works, e.g. thesis, conference paper)\n- The university owns the IP of any software created by Warwick PhD students and staff in the course of their work\n- Before making code public or publishing software under any license, contact Brendan at [B.Spillane@warwick.ac.uk](mailto:B.Spillane@warwick.ac.uk)\n\n  - Permission to publish under an open source license likely to be granted for research code\n  - Not necessary to obtain permission if open source software was part of grant proposal (as proposal will have already been checked by Research & Impact Services, who will have identified any IP issues).\n:::\n\n::: {.notes}\nExtra note from Brendan: \"they don’t need to come to me with every single bit of code they open source. I’m more interested in the entirety of the project rather than approving 2000 bits of individual code!\"  \n:::\n\n## Your turn\n\n1. Open the DESCRIPTION file and add a title and description.\n2. Add yourself as an author and creator.\n3. Add an MIT license.\n4. Run the package check.\n5. Commit changes to GitHub.\n\n:::{.callout-tip}\nIn RStudio, you can use the 'Go to file/function' box or Ctrl + . [period] and start typing a file name to open a file for editing.\n:::\n\n# README {.inverse}\n\n## README\n\nThe README is the quick start guide to your package.\n\nIt should include \n\n - a brief overview\n - instructions on how to install the package\n - a few examples\n \nYou should be able to borrow from the DESCRIPTION and help files!\n\nIt's readable on the package's GitHub repo and on the homepage of its website (more on that later).\n\n## Creating a README\n\n**usethis** has functions to set up a README with/without R code\n\n```r\nusethis::use_readme_rmd()\nusethis::use_readme_md()\n```\n\n`README.Rmd` must be rendered to make `README.md` each time it \nis changed.\n\n`usethis::use_readme_rmd()` creates a _pre-commit hook_ to check if `README.Rmd` and `README.md` are out of sync before committing.\n\nUse `build_readme()` to render with the latest version of the code.\n\n::: {.notes}\n`build_readme` creates a temporary version of the package\n:::\n\n# Continuous Integration (CI) {.inverse}\n\n::: {.notes}\nThe practice of merging new code into the repository and running checks each time is known as Continuous Integration.\n:::\n\n## Running automatic checks\n\nGitHub Actions (GHAs) allow you to run code every time you push to GitHub. \n\nThe most useful ones for packages can be selected from a call to `usethis::use_github_action()`:\n\n```{.r}\nuse_github_action()\n```\n\n```\nWhich action do you want to add? (0 to exit)\n(See <https://github.com/r-lib/actions/tree/v2/examples> for other options) \n\n1: check-standard: Run `R CMD check` on Linux, macOS, and Windows\n2: test-coverage: Compute test coverage and report to https://about.codecov.io\n3: pr-commands: Add /document and /style commands for pull requests\n```\n\n`check-standard` sets up a GHA that runs `R CMD check` with the latest release of R on Linux, Mac, and Windows and with both the previous release and development release of R on Linux.\n\n::: {.notes}\nThis behaviour of `use_github_action()` is new in usethis 2.2.\n\n`use_github_actions()` is deprecated.\n:::\n\n## [`use_github_action(\"check-release\")`]{.smaller90}\n\nThe `check-standard` GHA is best-practice for 'serious' projects, e.g. those aiming for CRAN, but is overkill for our purposes. \n\nWe can set up a simpler GHA by specifying an alternative:\n\n```{.r}\nuse_github_action(\"check-release\")\n```\n\nThis sets up a bare-minimum workflow that runs `R CMD check` with the latest release of R on Linux.\n\nIt's good for simple package with no OS-sepcific code, and if you want a quick start with R CI.\n\n::: {.notes}\ni.e. it's perfect for us!  \n:::\n\n## Your turn\n\n1. Create a README for `animalsounds` with `usethis::use_readme_rmd()`.\n2. Fill in the description and an example.\n3. Try adding the README in a git commit -- it should fail!. Render the README with `build_readme()`, then add both `README.Rmd` and `README.md` in a git commit.\n4. Run `usethis::use_github_action(\"check-release\")`. It adds a badge to the README, so you will need to render the README again.\n5. Commit all the changes to git.\n\n# Vignettes {.inverse}\n\n## Vignettes\n\nVignettes are long-form documentation for your package.\n\nThey use R markdown to integrate code and output into the documentation. Typically:\n\n - A single/main vignette showing a complete workflow. \n - Optional further vignette(s) going deeper on one aspect/application\n - Optional further vignette(s) for specialist audience (methodologists or developers)\n \nA vignette with the same name as the package (e.g., `vignettes/animalsounds.Rmd` or `vignettes/articles/animalsounds.Rmd`) automatically becomes a top-level \"Get started\" link.\n \n::: {.notes}\nFairly short read ~10 minutes\n::: \n\n## `use_vignette()`\n\nEasiest way to get started is with `usethis::use_vignette()`\n\n```r\nusethis::use_vignette(\"name\")\n```\n\nAdds to DESCRIPTION\n\n<pre>\nSuggests: knitr\nVignetteBuilder: knitr\n</pre>\n\nCreates `vignettes/`\n\nDrafts `vignettes/name.Rmd`\n\n::: {.notes}\nuse_vignette() will fill both title fields with the \"name\" of the file, but you'll want to edit to something more descriptive.\n\nNeeds to be .Rmd not .qmd. Quarto is not R-specific and CRAN can't publish .qmd files.  \n:::\n\n## Vignette = Rmarkdown + special metadata\n\n```\n---\ntitle: \"Vignette Title\"\nauthor: \"Vignette author\"\ndate: \"2023-06-17\"\noutput: rmarkdown::html_vignette\nvignette: >\n%\\VignetteIndexEntry{Vignette Title}\n%\\VignetteEngine{knitr::rmarkdown}\n%\\VignetteEncoding{UTF-8}\n---\n\n```\n* `html_vignette` output uses a custom style sheet to keep the file size of the \nHTML as small as possible.\n* The `vignette:` field contains special metadata needed when the package is \nbuilt. **Don't forget to change the title here too!**\n\n## Vignette workflow\n\n![](images/vignette_workflow.png){fig-align=\"center\"}\n\n::: {.notes}\nNeed to install package so can call with `library()`  \n:::\n\n## Your turn\n\n1. Install your **animalsounds** package and restart R (Install button).\n2. Create a simple vignette, `animalsounds`, that shows how to use `animal_sounds()`.\n3. Fix the \"vignette title\" in the YAML header.\n4. Knit the vignette to preview it.\n5. Run `devtools::install(build_vignettes = TRUE)` to install the package with the vignettes. Call `browseVignettes(\"animalsounds\")` to open your vignette.\n6. Commit your changes to git.\n\n# NEWS {.inverse}\n\n## Track changes in a NEWS file\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_news_md()\n```\n:::\n\n\nAdd news for the latest version at the top.\n\nUse a top-level heading for each release version\n\n```r\n# animalsounds 1.0.0\n```\n\n\n## What news to include\n\nAdd each change in a bulleted list:\n\n- If you have many changes, split into subsections (e.g.\n    `## Major changes`, `## Minor improvements`, `## Bug fixes`).\n- Wait until release to decide if subsections are necessary\n \nNote connections to GitHub:\n\n - If related to a GitHub issue, add the issue number, e.g. (`#10`). \n - If related to a pull request, add the pull request number and the author, e.g. (`#101, @hadley`). \n\n#  Package website with pkgdown {.inverse}\n\n## A package website pkgdown\n\nThe **pkgdown** package is designed to make it quick and easy to build a website for your package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_pkgdown()\n```\n:::\n\n\nWhy have a website for your package?\n\n  - Google-ability\n  - Easy-to-read and browse documentation and package information in one place\n  - Examples with output!\n  \n## Build a website\n\n`pkgdown::build_site()` creates a package website based on the \nstandard documentation files.\n\n**Home page**: based on README\n\n**Reference**: \n\n - one page for each help file\n - generates an index page, with functions listed alphabetically by default \n \n::: {.notes}\nFor packages with lots of functions, it's good to organise them by theme or functionality.\n:::\n\n## Build a website (ctd)\n\n**Articles**: one page for each vignette\n\n**Get Started**: if you have a vignette with filename = package name\n\n**News**: based on NEWS.md\n\nPlus:\n\n - A link to your GitHub repo (if listed in the DESCRIPTION url field).\n - A link to the License\n - Any badges added to your README (e.g. from GitHub Actions)\n\n## Hosting your website\n\n- You can host your website directly from its GitHub repo\n- The recommended approach is to let GitHub build your page (instead of calling `pkgdown::build_site()` and committing and pushing the artifacts of the built website (i.e., html files) to GitHub\n- Add an action to your GitHub repo to be run automatically every time you push to it to rebuild the site:\n\n  ```{.r}\n  usethis::use_pkgdown_github_pages()\n  ```\n\n- The URL will be https://USERNAME.github.io/animalsounds  \n  \n::: {.notes}\nuse_pkgdown_github_pages() will:\n\n - call `use_pkgdown()` - allow it to overwrite existing `_pkgdown.yml` (will add the url)\n - set up a `gh-pages` branch from which to deploy the site\n - add a `pkgdown.yml` to .github/workflows\n\nWill still need to call `pkgdown::build_site()` to preview locally\n:::\n\n## Customising your website\n\nYou can add more information to `_pkgdown.yml` to customise the package website:\n\n- curate the index for the Reference page - functions can be grouped and described in categories\n\n  <https://pkgdown.r-lib.org/articles/pkgdown.html#reference>\n\n- customise the appearance\n\n  <https://pkgdown.r-lib.org/articles/customise.html>\n\n## Your turn\n\n1. Run `usethis::use_pkgdown_github_pages()` -- this will ask you to install **pkgdown** if you don't already have it.\n2. Read through all the output in the console to see the many things that this function does. \n3. Look at the diffs in the Git pane. Commit and push all changes.\n4. Go to your GitHub repo of the package. Click on **Actions**. If there's a green tick next to \"pages build and deployment\" then your site is ready to view!\n5. Click on the link to the website under the **About** section of the repo.\n6. (Bonus) Change the appearance of the site with a Bootswatch theme: <https://pkgdown.r-lib.org/articles/customise.html#bootswatch-themes>. \n\n# End matter {.inverse}\n\n## References\n\nWickham, H and Bryan, J, *R Packages* (2nd edn, in progress), <https://r-pkgs.org>.\n\nR Core Team, *Writing R Extensions*, <https://cran.r-project.org/doc/manuals/r-release/R-exts.html>\n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n\n\n```{=html}\n<!-- needs to be last chunk of presentation otherwise creates an extra slide -->\n<!-- requires Quarto v1.3 -->\n<!-- tint80 for border, tint20 for title -->\n<!-- this should hopefully no longer be necessary in Quarto 1.4 -->\n<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->\n<style type=\"text/css\">\ndiv.callout-note {\n  border-left-color: #336695 !important;\n}\n\ndiv.callout-note.callout-style-default .callout-title {\n  background-color: #CCD9E4 !important;\n}\n\ndiv.callout-caution {\n  border-left-color: #AE4240 !important;\n}\n\ndiv.callout-caution.callout-style-default .callout-title {\n  background-color: #ebd0cf !important;\n}\n\ndiv.callout-tip {\n  border-left-color: #618157 !important;\n}\n\ndiv.callout-tip.callout-style-default .callout-title {\n  background-color: #d8e0d5 !important;\n}\n\ndiv.callout-important {\n  border-left-color: #775781 !important;\n}\n\ndiv.callout-important.callout-style-default .callout-title {\n  background-color: #ddd5e0 !important;\n}\n\ndiv.callout-warning {\n  border-left-color: #956133 !important;\n}\n\ndiv.callout-warning.callout-style-default .callout-title {\n  background-color: #e4d8cc !important;\n}\n</style>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}