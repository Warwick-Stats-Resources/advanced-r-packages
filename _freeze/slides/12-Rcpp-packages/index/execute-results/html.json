{
  "hash": "520597eefb02ff1392af210ee226ddc4",
  "result": {
    "markdown": "---\ntitle: Rcpp Package Development\nsubtitle: R Packages\nauthor: \n  - name: Heather Turner and Ella Kaye\n  - name: Department of Statistics, University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2023-06-21\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n- C++ and Rcpp\n- Creating an Rcpp package\n- Rcpp development workflow\n- C++ interface\n- **RcppArmadillo**\n\n# C++ and Rcpp {.inverse}\n\n## Recap\n\nThis session assumes familiarity with the [C++ and Rcpp](../../content/06-r-with-cpp/index.html) session of the Advanced R workshop.\n\n::: {.notes}\nFor the 2023 workshop, all participants should either have attended this session the day before or been e-mailed in advanced with a link to the material and told that it is a prerequisite.\n:::\n\n# Creating an Rcpp package {.inverse}\n\n## Create a version-controlled package \n\nCreate a new package:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::create_package(\"~/Desktop/pkgrcpp\")\n```\n:::\n\n\nMake your package a Git repo:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n\nLink to GitHub:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_github()\n```\n:::\n\nCommit your changes to git with a message \"use GitHub\".\n\n## Use Rcpp\n\nUse Rcpp and create an initial `.cpp` file:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_rcpp(\"add_cpp\")\n```\n:::\n\n\n- Creates a `/src` directory for our C++ files\n- Sets up `src/.gitignore` to ignore compiled files\n- Adds \"Rcpp\" to the \"LinkingTo\" and \"Imports\" fields in DESCRIPTION\n- Adds `add_cpp.cpp` ready for editing.\n\nIt also copies some code to the clipboard for us to add \nto `R/<packagename>-package.R` which we must create.\n\n## `<packagename>-package.R`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_r(\"pkgrcpp-package.R\")\n```\n:::\n\n\nThen copy the code from the clipboard into this file:\n\n```\n## usethis namespace: start\n#' @useDynLib pkgrcpp, .registration = TRUE\n#' @importFrom Rcpp sourceCpp\n## usethis namespace: end\nNULL\n```\n\nThe roxygen2 comments direct to \n\n - import `Rcpp::sourceCpp`\n - add `useDynLib(pkgrcpp,\".registration=TRUE\")` to the NAMESPACE, so that the compiled code can be loaded and all C++ routines will be registered.\n\n::: {.notes}\npackage level doc: https://stackoverflow.com/a/60750351/173755\n\nWe'll still need to create the package documentation (NAMESPACE) later.\n:::\n\n## Add an Rcpp function\n\n`add_cpp.cpp` should already have the following code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n```\n:::\n\n\nEdit `add_cpp.cpp` to add a C++ function and the Rcpp export comment, e.g.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n// [[Rcpp::export]]\ndouble add_cpp(double x, double y) {\n  double value = x + y;\n  return value;\n}\n```\n:::\n\n\n::: {.notes}\nnote the header #include and the special attribute\n// [[Rcpp::export]]\n:::\n\n## Run Build > Document\n\nBuild > Document or Ctrl/Cmd + Shift + D now runs two functions:\n\n- `Rcpp::compileAttributes()` looks for `// [[Rcpp::export]]` and generates\n    - `src/RcppExports.cpp`: C routines wrapping exported C++ functions\n    - `R/RcppExports.R`: R wrappers that call the C routines.\n- `devtools::document()` that converts roxygen comments as usual, in particular updating the NAMESPACE.\n\n    ```\n    importFrom(Rcpp,sourceCpp)\n    useDynLib(pkgrcpp, .registration = TRUE)\n    ```\n\n::: {.notes}\nhttp://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf\n\nFrom the menu bar it's Build > Document\nFrom the build pane, it's Build > More > Document\n:::\n\n## R wrapper\n\nThe R wrapper generated by Rcpp is as follows, in `R/RcppExports.R`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Generated by using Rcpp::compileAttributes() -> do not edit by hand\n# Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393\n\nadd_cpp <- function(x, y) {\n    .Call(`_pkgrcpp_add_cpp`, x, y)\n}\n```\n:::\n\n\nCurrently this is an internal R function - we have not taken any action to add it as an export in the NAMESPACE.\n\n## Try out the R wrapper\n\n`devtools::load_all()`, Ctrl/Cmd + Shift + L, makes both internal and exported functions available for testing (without using `:::` or `::`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndevtools::load_all()\nadd_ccp(3, 4)\n```\n:::\n\n\n::: {.notes}\nThis is one advantage over install and restart.\n\nAlso install and restart does not work well on Windows as the package is locked after loading with library().\n:::\n\n## Your turn\n\n:::{.smaller90}\n1. Commit the changes so far with a message \"Use Rcpp and add add_cpp function\".\n2. Create a new `.cpp` file in the `/src` directory (using `use_rcpp` or File > New File). Save the file as `sumC.cpp`. Add the C++ function\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n// [[Rcpp::export]]\ndouble sumC(NumericVector x) {\n  int n = x.size();\n  double total = 0;\n  for(int i = 0; i < n; ++i) {\n    total += x[i];\n  }\n  return total;\n}\n```\n:::\n\n3. Run Build > Document. Look at the changes to the repo by looking at the diff.\n4. Run `devtools::load_all()` and try out the new function.\n5. Commit your changes to git.\n:::\n\n# Rcpp development workflow {.inverse}\n\n## Rcpp development workflow\n\nThe development workflow is the same as for R:\n\n - Modify Rcpp Code -> Load All -> Explore in Console.\n\n`devtools::load_all()` will detect changes in the C++ code and \n\n - Update `src/RcppExports.cpp` and `R/RcppExports.R`\n - Recompile the C++ code\n\n## Document the R wrapper\n\n- We only need to document the R wrapper if we plan to export it.\n\n- The R wrapper is generated by `Rcpp::compileAttributes()`, so we cannot add roxygen comments to export or document the function there.\n\n- Instead, we add comments above our C++ function, using `\\\\'`instead of `#'`.\n\n## C++ roxygen\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nIn `add_cpp.cpp`\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n//' Add Two Numbers\n//'\n//' Return the sum of two numbers.\n//' @param x\n//' @param y\n//' @export\n// [[Rcpp::export]]\ndouble add_cpp(double x, double y) {\n  double value = x + y;\n  return value;\n}\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nIn generated `R/RcppExports.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#' Add Two Numbers\n#'\n#' Return the sum of two numbers.\n#' @param x\n#' @param y\n#' @export\n// [[Rcpp::export]]\nadd_cpp <- function(x, y) {\n    .Call(`_pkgrcpp_add_cpp`, x, y)\n}\n```\n:::\n\n:::\n\n::::\n\n## Your turn\n\n1. Copy the documentation for `add_cpp` and add it to `add_cpp.cpp`.\n2. Using the documentation for `add_cpp` as a guide, add documentation \nto `sumC.cpp`.\n3. Run Build > Document to update the NAMESPACE and create the documentation files for the two R wrappers.\n4. Commit your changes to git.\n\n## Exporting C++ Code\n\nAs we have seen, `Rcpp::compileAttributes()` creates an R interface to our exported C++ functions.\n\nTo make a C++ interface for code in a `.cpp` file, we should add a custom `Rcpp::interfaces()` attribute as follows:\n\n```cpp\n#include <Rcpp.h>\nusing namespace Rcpp;\n// [[Rcpp::interfaces(r, cpp)]]\n```\n\nWe can specify `r` and/or `cpp` to ask for an R and/or C++ interface.\n\n::: {.notes}\nN.B. // [[Rcpp::export]] must come AFTER // [[Rcpp::interfaces]]  \n:::\n\n## C++ Interface\n\n`Rcpp::compileAttributes()` generates the following header files in `/inst/include`:\n\n - `<packagename>_RcppExports.h`: inline definitions for all exported C++ functions.\n - `<packagename>.h`: includes the `<packagename>_RcppExports.h`. Package authors may add additional C++ code here for sharing.\n \nAll directories in `inst` are moved to the top level of the package directory on installation.\n\n## Your turn\n\n1. Add an `Rcpp::interfaces()` attribute to `add_cpp.cpp` to request both R and C++ interfaces for the `add_cpp` function.\n2. Run Build > Document to create the C++ interface. Take a look at the generated files.\n3. Commit your changes to git.\n\n::: {.notes}\nWhen I did this, it deleted `man/add_cpp.Rd`. Not sure why. I used 'revert' in the git pane to undo this.\n:::\n\n## Importing C++ code with Rcpp C++ interface\n\nTo use C++ code from another package that has created a C++ interface for their Rcpp functions, in DESCRIPTION add\n```\nLinkingTo: otherpkg\n```\ne.g. with `usethis::use_package(otherpkg, type = \"LinkingTo\")`. Then in `.cpp` file, add the header file to includes\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\n#include <otherpkg.h>\n```\n:::\n\n\nThen either `using namespace otherpkg;` to make the functions from `otherpackage` available globally, or `otherpkg::fn()` to access functions directly.\n\n::: {.notes}\nhttps://www.faqcode4u.com/faq/20021/using-c-function-from-other-package-in-rcpp\npossibly https://cran.r-project.org/web/packages/RcppClock/RcppClock.pdf\nhttps://dirk.eddelbuettel.com/papers/useR2017_rcpp_tutorial.pdf\nhttps://github.com/stla/RcppColors\n\nmaybe\nhttps://github.com/drostlab/philentropy\nhttps://github.com/cran/cooltools/tree/master/inst/include\nhttps://github.com/YeeJeremy/rflann  \n:::\n\n## Example: Alternative Distribution Functions\n\nIn the Advanced R workshop (final exercise of the Rcpp session), we wrote an Rcpp function to approximate $\\pi$:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\ndouble approx_pi(const int N) {\n  NumericVector x = runif(N);\n  NumericVector y = runif(N);\n  NumericVector d = sqrt(x*x + y*y);\n  return 4.0 * sum(d < 1.0) / N;\n}\n```\n:::\n\n\nWe can try using the `dqrunif` C++ functions provided by the **dqrng** package instead of `Rcpp::runif`.\n\n[See <https://daqana.github.io/dqrng/index.html> for more info on this package.]{.smaller80}\n\n## Your turn\n\n:::{.smaller90}\n1. Install the **dqrng** package.\n2. Use `usethis::use_package()` to add `dqrng` to `LinkingTo`. It will show possible headers to include, including `dqrng.h` which provides the Rcpp exports.\n3. Create a new `.cpp` file and add the `approx_pi` function. Make sure to add the necessary headers and Rcpp attribute, so that you can use it after running `devtools::load_all()`.\n4. Add a second version of the `approx_pi` function that uses the `dqrunif` C++ functions from `dqrng` instead.\n5. Load all and use `bench::mark()` to benchmark the two versions with `N = 1e7`, setting `check = FALSE` in `bench::mark()` as the generated random numbers will differ.\n6. Commit your changes to git\n:::\n\n## Importing other C++ code  \n\nSome packages provide a custom `<packagename>.h` or other C++ headers.\n\n - The header maybe not be called `<packagename>.h`!\n - The namespace may have a different name from the package or the header file and may be nested.\n - If the header include headers from other packages, you will need to add these to `LinkingTo`.\n - If the package has custom build settings (e.g. using C++11), you will need to use these for your package.\n \nThe documentation should clarify what is needed for a particular package.\n\n## Example: BH Package\n\nThe **BH** package provides header files for the [Boost](https://www.boost.org/) C++ libraries.\n\nThe header files have `.hpp` extension and are nested in directories. The namespace is similarly nested:\n \n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\n#include <boost/integer/common_factor.hpp>\n\n// [[Rcpp::export]]\nint computeGCD(int a, int b) {\n    return boost::integer::gcd(a, b);\n}\n```\n:::\n\n\nInclude `BH` in `LinkingTo:` to add this function to a package.\n\n::: {.notes}\ngcd is a function to compute the greatest common denominator\n\n.hpp extension: header files for C++\n:::\n\n# RcppArmadillo {.inverse}\n\n## RcppArmadillo\n\nThe **RcppArmadillo** package provides headers for the [Armadillo](http://arma.sourceforge.net/) library for linear algebra & scientific computing.\n\nThe header to include is `RcppArmadillo.h`, which provides the `armadillo` header defining the `arma` namespace, e.g. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.cpp .cell-code}\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\n\n// [[Rcpp::export]]\narma::vec getEigenValues(arma::mat M) {\n    return arma::eig_sym(M);\n}\n```\n:::\n\n\n## Using RcppArmadillo\n\nTo use **RcppArmadillo** in a package, we need to \n\n - Add `RcppArmadillo` to `LinkingTo`\n - Enable OpenMP support and link against the BLAS and LAPACK linear algebra libraries by defining compilation options in `src/Makevars` and `src/Makevars.win`.\n \nBoth can be done with `usethis::use_rcpp_armadillo()`.\n\nThe first time you call it, you may be asked whether to install **RcppArmadillo**. Choose the affirmative option.\n\n::: {.notes}\nOpenMP for parallel processing\n\nhttps://stackoverflow.com/q/68959897/173755\n:::\n\n## Notes: `use_rcpp_armadillo()`\n\n- As well as doing the general setup to allow a package to use **RcppArmadillo**, it also creates a `src` directory and a `.cpp` file to edit.\n\n- If you already have a `.cpp` file in a `src` directory, by default it may try to overwrite it. If it does, select one of the **negative** options.\n\n  - You need to specify the name of a new `.cpp` as an argument instead, e.g. `use_rcpp_armadillo(\"new_file\")`\n  \n  - The function adds to the top of the `.cpp` file\n  \n    ``` \n    #include <Rcpp.h>\n    using namespace Rcpp;\n    ```\n    \n    - **This is a bug**. You need instead\n    \n    ```\n    #include <RcppArmadillo.h>\n    // [[Rcpp::depends(RcppArmadillo)]]\n    ```\n\n## Extra note for Apple Silicon Macs\n\nIf you have an Apple Silicon Mac, you will also need to do the following:\n\n- open your global Makevars by calling `usethis::edit_r_makevars()`\n\n- Add the following code:\n\n  ```\n  FLIBS= -L/opt/R/arm64/gfortran/lib\n  ```\n  \n- Session > Restart R (or Cmd + Shift + 0)\n\n\n\n## Your turn\n\n:::{.smaller90}\n1. Run `usethis::use_rcpp_armadillo(\"inner_prod\")` to set the package up to use RcppArmadillo and create a new `.cpp` file.\n\n2. In `inner_prod.cpp`, edit the `#include` statement for RcppArmadillo and add the code\n\n::: {.cell layout-align=\"center\"}\n\n```{.rcpp .cell-code}\n// [[ Rcpp::export]]\ndouble inner_prod (arma::vec x, arma::vec y) {\n    arma::mat z = x.t() * y ;\n    return(z(0)) ;\n}\n```\n:::\n\n3. Run Build > Document to create the R wrapper.\n4. Run `devtools::load_all()` to load the function and try it out.\n5. Commit your changes to git.\n6. Push all your changes to git from this session.\n:::\n\n::: {.notes}\nThere are issues with lgfortran on macOS. Currently trying to work out how to fix these.  \n:::\n\n# End matter {.inverse}\n\n## References\n\n- R Core Team, _Writing R Extensions_, <https://cran.r-project.org/doc/manuals/r-release/R-exts.html>\n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n\n\n```{=html}\n<!-- needs to be last chunk of presentation otherwise creates an extra slide -->\n<!-- requires Quarto v1.3 -->\n<!-- tint80 for border, tint20 for title -->\n<!-- this should hopefully no longer be necessary in Quarto 1.4 -->\n<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->\n<style type=\"text/css\">\ndiv.callout-note {\n  border-left-color: #336695 !important;\n}\n\ndiv.callout-note.callout-style-default .callout-title {\n  background-color: #CCD9E4 !important;\n}\n\ndiv.callout-caution {\n  border-left-color: #AE4240 !important;\n}\n\ndiv.callout-caution.callout-style-default .callout-title {\n  background-color: #ebd0cf !important;\n}\n\ndiv.callout-tip {\n  border-left-color: #618157 !important;\n}\n\ndiv.callout-tip.callout-style-default .callout-title {\n  background-color: #d8e0d5 !important;\n}\n\ndiv.callout-important {\n  border-left-color: #775781 !important;\n}\n\ndiv.callout-important.callout-style-default .callout-title {\n  background-color: #ddd5e0 !important;\n}\n\ndiv.callout-warning {\n  border-left-color: #956133 !important;\n}\n\ndiv.callout-warning.callout-style-default .callout-title {\n  background-color: #e4d8cc !important;\n}\n</style>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}