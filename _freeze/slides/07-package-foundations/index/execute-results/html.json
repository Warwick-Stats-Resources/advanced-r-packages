{
  "hash": "d2d2206fed242e36daf264becf2d18d6",
  "result": {
    "markdown": "---\ntitle: Package Foundations\nsubtitle: R Packages\nauthor: \n  - name: Heather Turner and Ella Kaye\n  - name: Department of Statistics, University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2023-06-20\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n- Why write a package?\n- Package structure and state\n- Setting up development tools\n- Creating a package with a working function\n\n# Why write a package? {.inverse}\n\n## Why write a package?\n\n-  You want to **generalise** code\n-  You want to **document** code\n-  You want to **test** code\n-  You want to **share** code\n-  You want to create **impact** from your work\n\n## Script vs package\n\n| R script                       | Package                             |\n|--------------------------------|-------------------------------------|\n| One-off data analysis          | Provides reusable components        |\n| Defined by `.R` extension      | Defined by presence of `DESCRIPTION` file |\n| `library()` calls              | Imports defined in `NAMESPACE` file |\n| Documentation in `#` comments  | Documentation in files and `Roxygen` comments |\n| Run lines or source file       | Install and restart                 |\n\n::: {.notes}\nreusable components: typically functions, but could also be R markdown template, Shiny app, data\n:::\n\n# Package structure and state {.inverse}\n\n## Package structure\n\nAn R package is developed as a directory of source code files.\n\nThe names of files and directories must follow the specification laid out in \nthe [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html) manual - we'll cover the main components in this workshop.\n\nDirectory tree for an example RStudio package project:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nmypackage\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n└── mypackage.Rproj\n```\n:::\n:::\n\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- ::::{.larger125}\n  :::{.callout-note}\n  ## source\n  :::\n  ::::\n- bundled\n- binary\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## source\nWhat you create and work on.\n\nSpecific directory structure with some particular components e.g., `DESCRIPTION`, an `/R` directory.\n:::\n:::::\n::::::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- ::::{.larger125}\n  :::{.callout-note}\n  ## bundled\n  :::\n  ::::\n- binary\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## bundled\nPackage files compressed to single `.tar.gz` file.\n\nAlso known as \"source tarballs\".\n\nCreated by command line tool `R CMD build`\n\nUnpacked it looks very like the source package.\n:::\n:::::\n::::::\n\n::: {.notes}\nIn the rare case that you need to make a bundle from a package you’re developing locally, use devtools::build(). Under the hood, this calls pkgbuild::build() and, ultimately, R CMD build, which is described further in the Building package tarballs section of Writing R Extensions.\n:::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- ::::{.larger125}\n  :::{.callout-note}\n  ## binary\n  :::\n  ::::\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## binary\nCompressed copy of the package in installed form.\n\nAlso a single file.\n\nPlatform specific: `.tgz` (Mac) `.zip` (Windows).\n\nPackage developers submit a bundle to CRAN; CRAN makes and distributes binaries.\n:::\n:::::\n::::::\n\n::: {.notes}\n\nA package in binary form is Platform specific.\nIf you write a package for distribution on CRAN, you submit a bundle to CRAN then CRAN makes and distributes binaries\n\n\n`install.packages()` is usually downloading the binary\n\nTo understand the difference between package bundle and a package binary see <https://r-pkgs.org/package-structure-state.html> \n:::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- binary\n- ::::{.larger125}\n  :::{.callout-note}\n  ## installed\n  :::\n  ::::\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## installed\nA directory of files in a library directory.\n\nAny C/C++/Fortran code is in compiled form.\n\nHelp files, code and optionally data are in database form.\n\n`install.packages()` can install from source or from a binary\n:::\n:::::\n::::::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- binary\n- installed \n- ::::{.larger125}\n  :::{.callout-note}\n  ## in-memory\n  :::\n  ::::\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## in-memory\nIf a package is installed, `library()` makes its function available by loading the package into memory and attaching it to the search path.\n:::\n:::::\n::::::\n\n\n\n# End Matter {background-color=\"#552D62\"}\n\n## Resources\n\nMaterial inspired by and remixed from:\n\n- \n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n\n\n```{=html}\n<!-- needs to be last chunk of presentation otherwise creates an extra slide -->\n<!-- requires Quarto v1.3 -->\n<!-- tint80 for border, tint20 for title -->\n<!-- this should hopefully no longer be necessary in Quarto 1.4 -->\n<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->\n<style type=\"text/css\">\ndiv.callout-note {\n  border-left-color: #336695 !important;\n}\n\ndiv.callout-note.callout-style-default .callout-title {\n  background-color: #CCD9E4 !important;\n}\n\ndiv.callout-caution {\n  border-left-color: #AE4240 !important;\n}\n\ndiv.callout-caution.callout-style-default .callout-title {\n  background-color: #ebd0cf !important;\n}\n\ndiv.callout-tip {\n  border-left-color: #618157 !important;\n}\n\ndiv.callout-tip.callout-style-default .callout-title {\n  background-color: #d8e0d5 !important;\n}\n\ndiv.callout-important {\n  border-left-color: #775781 !important;\n}\n\ndiv.callout-important.callout-style-default .callout-title {\n  background-color: #ddd5e0 !important;\n}\n\ndiv.callout-warning {\n  border-left-color: #956133 !important;\n}\n\ndiv.callout-warning.callout-style-default .callout-title {\n  background-color: #e4d8cc !important;\n}\n</style>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}