{
  "hash": "c0f9ba4ed5e08e9538d89f3438f236c8",
  "result": {
    "markdown": "---\ntitle: Package Foundations\nsubtitle: R Packages\nauthor: \n  - name: Heather Turner and Ella Kaye\n  - name: Department of Statistics, University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2023-06-20\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n- Why write a package?\n- Package structure and state\n- Package development setup\n- Creating a package with a working function\n\n# Why write a package? {.inverse}\n\n## Why write a package?\n\n-  You want to **generalise** code\n-  You want to **document** code\n-  You want to **test** code\n-  You want to **share** code\n-  You want to create **impact** from your work\n\n## Script vs package\n\n| R script                       | Package                             |\n|--------------------------------|-------------------------------------|\n| One-off data analysis          | Provides reusable components        |\n| Defined by `.R` extension      | Defined by presence of `DESCRIPTION` file |\n| `library()` calls              | Imports defined in `NAMESPACE` file |\n| Documentation in `#` comments  | Documentation in files and `Roxygen` comments |\n| Run lines or source file       | Install and restart                 |\n\n::: {.notes}\nreusable components: typically functions, but could also be R markdown template, Shiny app, data\n:::\n\n# Package structure and state {.inverse}\n\n## Package structure\n\nAn R package is developed as a directory of source code files.\n\nThe names of files and directories must follow the specification laid out in \nthe [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html) manual - we'll cover the main components in this workshop.\n\nDirectory tree for an example RStudio package project:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nmypackage\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n└── mypackage.Rproj\n```\n:::\n:::\n\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- ::::{.larger125}\n  :::{.callout-note}\n  ## source\n  :::\n  ::::\n- bundled\n- binary\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## source\nWhat you create and work on.\n\nSpecific directory structure with some particular components e.g., `DESCRIPTION`, an `/R` directory.\n:::\n:::::\n::::::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- ::::{.larger125}\n  :::{.callout-note}\n  ## bundled\n  :::\n  ::::\n- binary\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## bundled\nPackage files compressed to single `.tar.gz` file.\n\nAlso known as \"source tarballs\".\n\nCreated by command line tool `R CMD build`\n\nUnpacked it looks very like the source package.\n:::\n:::::\n::::::\n\n::: {.notes}\nIn the rare case that you need to make a bundle from a package you’re developing locally, use devtools::build(). Under the hood, this calls pkgbuild::build() and, ultimately, R CMD build, which is described further in the Building package tarballs section of Writing R Extensions.\n:::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- ::::{.larger125}\n  :::{.callout-note}\n  ## binary\n  :::\n  ::::\n- installed\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## binary\nCompressed copy of the package in installed form.\n\nAlso a single file.\n\nPlatform specific: `.tgz` (Mac) `.zip` (Windows).\n\nPackage developers submit a bundle to CRAN; CRAN makes and distributes binaries.\n:::\n:::::\n::::::\n\n::: {.notes}\n\nA package in binary form is Platform specific.\nIf you write a package for distribution on CRAN, you submit a bundle to CRAN then CRAN makes and distributes binaries\n\n\n`install.packages()` is usually downloading the binary\n\nTo understand the difference between package bundle and a package binary see <https://r-pkgs.org/package-structure-state.html> \n:::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- binary\n- ::::{.larger125}\n  :::{.callout-note}\n  ## installed\n  :::\n  ::::\n- in-memory\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## installed\nA directory of files in a library directory.\n\nAny C/C++/Fortran code is in compiled form.\n\nHelp files, code and optionally data are in database form.\n\n`install.packages()` can install from source or from a binary\n:::\n:::::\n::::::\n\n## Package states\n\n:::::: {.columns}\n\n::::: {.column width=\"25%\"}\n- source\n- bundled\n- binary\n- installed \n- ::::{.larger125}\n  :::{.callout-note}\n  ## in-memory\n  :::\n  ::::\n:::::\n\n::::: {.column width=\"70%\"}\n:::{.callout-note}\n## in-memory\nIf a package is installed, `library()` makes its function available by loading the package into memory and attaching it to the search path.\n:::\n:::::\n::::::\n\n## Building/Installing Packages from Source\n\nThere are various reasons we may wish to build or install from source:\n\n- Installing a CRAN package where a binary has not yet been built for the latest version.\n- Installing a package from GitHub/other version-controlled source code repository, e.g.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nremotes::install_github(\"r-lib/revdepcheck\")\n```\n:::\n\n- Installing our own package from the source code or building it to submit to CRAN.\n\nIf the package includes C/C++/Fortran code, we will need a suitable compiler.\n\n# Build tools {.inverse}\n\n::: {.notes}\nCovered in the course prerequisites and in Session 6 on R with C++, but put here for completeness  \n:::\n\n## Linux\n\nDebian/Ubuntu:\n\n```{.sh}\napt-get update\napt-get install r-base-dev\n```\n\nFedora/RedHat: should be set up already.\n\n## MacOS\n\nOption 1\n\n- [Register as an Apple developer (for free)](https://developer.apple.com/programs/register/)\n  - Then, in the terminal:\n  \n     ```{.sh}\n     xcode-select --install\n     ```\n\nOption 2 \n\n- Install the current release of full [Xcode from the Mac App Store](https://itunes.apple.com/ca/app/xcode/id497799835?mt=12)\n - Within XCode go to Preferences -> Downloads and install the Command Line Tools\n- More convenient but installs a lot you don't need\n\n## Windows\n\n- Download the Rtools installer that matches your version of R from <https://cran.r-project.org/bin/windows/Rtools/>\n- Run the installer, `Rtools.exe`, keeping the default settings.\n\n# Package development setup {.inverse}\n\n## The setup we'll be using\n\nWe'll be using the following tools for package development:\n\n- RStudio: to manage and edit the package source code\n- git + GitHub: to version control the package source code\n- **devtools** and **usethis** R packages: \n    - **devtools** for functions supporting the development workflow\n    - **usethis** for setup tasks\n    - **devtools** depends on **usethis** package\n    - Integrated with RStudio: projects, menu items/shortcuts\n    - Uses system utilities internally: `R CMD` utilities bundled with R\n    \n## Follow along\n\nFor the rest of this session, follow along on your own computer to make sure you're set up for package development and to create our example package.\n    \n## **devtools** and **usethis**\n\nWe can use **devtools** right away to check our system is setup for package development.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhas_devel()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nYour system is ready to build packages!\n```\n:::\n:::\n\n\nInstalling **devtools** will also install **usethis**.    \n\nCheck you have the latest version of **usethis** -- 2.2.0 was recently released -- and update if not:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npackageVersion(\"usethis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '2.2.0'\n```\n:::\n:::\n\n\n## Create a GitHub PAT\n\nThe **usethis** package uses personal access tokens (PAT) to communicate with GitHub.\n\nFirst, make sure you're signed into GitHub. Then run\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n- Add Note describing the computer or use- case (e.g. personal-macbook-pro-2021, project-xyz)\n- Select expiration (recommend default 30 days)\n- Check scope (default selection is fine)\n- Click 'Generate Token'\n- **Important!** Copy token to clipboard, do not close window until stored (see next slide)!\n- You may want to store token in a secure vault, like 1Password or BitWarden\n\n## Store your PAT\n\nBy installing **usethis**, you will also have the **gitcreds** package to manage git credentials.\n\nPut your PAT into the Git credential store by running the following command and entering your copied PAT at the prompt (assume the PAT is on your clipboard).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\n- If you don't have a PAT stored, will prompt you to enter: paste!\n- If you do, you will be given a choice to keep/replace/see the password\n  - choose as appropriate\n  - if replacing, paste!\n\n## sitrep and vaccinate\n\nAsk for a **sit**uation **rep**ort:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::git_sitrep()\n```\n:::\n\n\nCheck that the PAT is discovered.\n\nCheck that your user name and email are defined, else follow the [configuration instructions](https://hturner.github.io/advanced-r/01_open_code_and_software.html#17) from a previous Advanced R workshop.\n\nIt's also a good idea to vaccinate. This implements best practice by adding files to your global `.gitignore`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::git_vaccinate() \n```\n:::\n\n\n## More on usethis and GitHub creds\n\nIt is well worth reading (and following all the instructions) in the following two **usethis** vignettes:\n\n- [usethis setup](https://usethis.r-lib.org/articles/usethis-setup.html)\n- [Managing Git(Hub) Credentials](https://usethis.r-lib.org/articles/git-credentials.html)\n  - See in particular the section on [ongoing PAT maintenance](https://usethis.r-lib.org/articles/git-credentials.html#ongoing-pat-maintenance)\n\n# Create a package! {.inverse}\n\n## Package name\n\nCan only contain the characters [A-Z, a-z, 0-9, .]. Some tips:\n\n-   Unique name you can easily Google\n-   Avoid mixing upper and lower case\n-   Use abbreviations\n-   Add an r to make unique, e.g **stringr**\n-   Use wordplay, e.g. **lubridate**\n-   Avoid trademarked names\n-   Use the **available** package to check name not taken\n\nFor now, we will use **mypackage**\n\n## Create a package!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::create_package(\"~/Desktop/mypackage\")\n```\n:::\n\n\n- Be deliberate about where you create your package.\n\n- Do not nest inside another RStudio project, R package or git repo.\n\n- You may want to use a different path!\n\n## `create_package()`\n\nWhat happens when we run `create_package()`?\n\n-   R will create a folder called `mypackage` which is a package and an RStudio project\n-   restart R in the new project\n-   create the some infrastructure for your package with the minimal components for a working package\n-   start the RStudio Build pane\n\n## R Studio Build pane/menu\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![](images/rstudio_build_pane.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/rstudio_build_menu.png)\n:::\n\n::::\n\n## Minimal components\n\n**usethis** will create the minimal components of a package that we have already seen:\n\n-   `DESCRIPTION` provides metadata about your package. \n-   `NAMESPACE` declares the functions your package exports for external use and the external functions your package imports from other packages.\n-   The `/R` directory is where we will put `.R` files with function definitions.\n\n## Auxiliary files\n\n**usethis** also adds some auxiliary files:\n\n-   `mypackage.Rproj` is the file that makes this directory an RStudio Project.\n-   `.Rbuildignore` lists files that we need but that should not be included when building the R package from source.\n-   `.gitignore` anticipates Git usage and ignores some standard, behind-the-scenes files created by R and RStudio.\n\n# git and GitHub {.inverse}\n\n::: {.notes}\nNow will make our package a version controlled project on our local machine and then put it on GitHub.\n\n - version control, best-practice open-source development \n\nusethis has functions to help with this.  \n:::\n\n## Use git\n\nTo make our project agGit repository, or 'repo', on our local machine we use `usethis::use_git()`\n\nMake your package a git repo:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n\n## `use_git()` output (part 1)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n ✔ Initialising Git repo\n ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to  '.gitignore' \n There are 5 uncommitted files:\n * '.gitignore'\n * '.Rbuildignore'\n * 'DESCRIPTION'\n * 'mypackage.Rproj'\n * 'NAMESPACE'\n Is it ok to commit them?\n\n 1: I agree\n 2: Absolutely not\n 3: No way\n```\n:::\n\n\nChoose the affirmative option! (The exact options may vary.)\n\n## `use_git()` output (part 2)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n√ Adding files\n√ Commit with message 'Initial commit'\n• A restart of RStudio is required to activate the Git pane\nRestart now?\n\n1: Nope\n2: Definitely\n3: No\n```\n:::\n\n\nChoose the affirmative option! (The exact options may vary.)\n\n::: {.notes}\nYou should find the git pane has opened.\n:::\n\n## Use GitHub\n\nTo create a copy on GitHub we use `usethis::use_github()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Choose one of the following:\nusethis::use_github() # creates a public repo\nusethis::use_github(private = TRUE)\n```\n:::\n\n\nThis takes a local project, creates an associated repo on GitHub, adds it to your local repo as the \"origin remote\", and makes an initial \"push\" to synchronize.\n\n. . .\n\n::::{.smaller80}\n:::{.callout-note}\n## Warwick GitHub\nUniversity of Warwick members can use the University's private GitHub instance, e.g.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_github(\"https://github.warwick.ac.uk\")\n```\n:::\n\nHowever, Warwick GitHub does not support GitHub Actions or GitHub Pages, so for packages using your personal account is better -- we'll be using both Actions and Pages later.\n:::\n::::\n\n## `use_github()` output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_github()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n ✔ Creating GitHub repository 'Warwick-Stats-Resources/mypackage'\n ✔ Setting remote 'origin' to 'https://github.com/Warwick-Stats-Resources/mypackage.git'\n ✔ Setting URL field in DESCRIPTION to  'https://github.com/Warwick-Stats-Resources/mypackage'\n ✔ Setting BugReports field in DESCRIPTION to  'https://github.com/Warwick-Stats-Resources/mypackage/issues'\n There is 1 uncommitted file:\n * 'DESCRIPTION'\n Is it ok to commit it?\n\n 1: Nope\n 2: For sure\n 3: No way\n```\n:::\n\n\nChoose the affirmative option! (The exact options may vary.)\n\n::: {.notes}\nTake a look at the repo on GitHub. There is no `/R` folder as that folder is empty at the moment!\n\nDuring the demo, will need to run `use_github(\"Warwick-Stats-Resources\")` as by default use_github goes to my personal repo\n:::\n\n## Adding functions\n\nFunctions go in an `.R` file in the `/R` directory.\n\nThere's a `usethis` helper for adding `.R` files!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_r(\"file_name\") \n```\n:::\n\n\n`usethis::use_r()` adds the file extension (you don't need to).\n\n. . .\n\nUse a separate `.R` file for each function or closely related set of functions, e.g.\n\n- a top-level function and the internal functions it calls\n- a family of related functions \n- a summary method and its print method\n\n## `usethis::use_r()`\n\nCreate a new R file in your package called `animal_sounds.R`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_r(\"animal_sounds\")\n```\n:::\n\n\nThe output includes:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n• Modify 'R/animal_sounds.R'  \n• Call `use_test()` to create a matching test file \n```\n:::\n\n\nIgnore the instruction to call `use_test()` for now - we'll cover testing later.\n\n## Add a function\n\nPut the following toy function into your script:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nanimal_sounds <- function(animal, sound) {\n    stopifnot(is.character(animal) & length(animal) == 1)\n    stopifnot(is.character(sound) & length(sound) == 1)\n    message(\"The \", animal, \" goes \", sound, \"!\")\n}\n```\n:::\n\n\nDon't try to use the function yet!\n\n## Development workflow\n\nIn a normal script, you might use:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsource(\"R/animal_sounds.R\")\n```\n:::\n\n\nHowever, for building packages, we need to use the `devtools` approach.\n\nThis will ensure our function has the correct namespace and can find internal functions, functions imported by our package from other packages, etc.\n\n## Development workflow\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/dev_cycle_before_testing.png){fig-align='center' fig-alt='schematic of the development workflow. there are three boxes with arrow joining them clockwise. The boxes are (clockwise from 3\\' oclock) \\'devtools::load_all() Cmd/Ctrl + Shift +L\\', \\'Explore in console\\' and \\'Modify code\\'' width=180}\n:::\n:::\n\n\n:::{.center-h}\nYou don't even need to save your code!\n:::\n\n::: {.notes}\ndevtools::load_all() simulates package installation so that you can test your function.\n:::\n\n## Your turn\n\n1. Load all with `devtools::load_all()` and try calling the `animalSounds()` function with appropriate values for `animal` and `sound`.\n2. Change some tiny thing about your function -- maybe the animal “says” instead \nof “goes”.\n3. Load all with `devtools::load_all()` and try calling the updated function to see the changed behaviour.\n4. Add `animal_sounds.R` so that it is tracked by git. Make a commit with the message `Add animal_sounds()`.\n5. Push all your commits from this session.\n\n# End matter {.inverse}\n\n## References\n\nWickham, H and Bryan, J, _R Packages_ (2nd edn, in progress), https://r-pkgs.org.\n\nR Core Team, _Writing R Extensions_, https://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n\n\n```{=html}\n<!-- needs to be last chunk of presentation otherwise creates an extra slide -->\n<!-- requires Quarto v1.3 -->\n<!-- tint80 for border, tint20 for title -->\n<!-- this should hopefully no longer be necessary in Quarto 1.4 -->\n<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->\n<style type=\"text/css\">\ndiv.callout-note {\n  border-left-color: #336695 !important;\n}\n\ndiv.callout-note.callout-style-default .callout-title {\n  background-color: #CCD9E4 !important;\n}\n\ndiv.callout-caution {\n  border-left-color: #AE4240 !important;\n}\n\ndiv.callout-caution.callout-style-default .callout-title {\n  background-color: #ebd0cf !important;\n}\n\ndiv.callout-tip {\n  border-left-color: #618157 !important;\n}\n\ndiv.callout-tip.callout-style-default .callout-title {\n  background-color: #d8e0d5 !important;\n}\n\ndiv.callout-important {\n  border-left-color: #775781 !important;\n}\n\ndiv.callout-important.callout-style-default .callout-title {\n  background-color: #ddd5e0 !important;\n}\n\ndiv.callout-warning {\n  border-left-color: #956133 !important;\n}\n\ndiv.callout-warning.callout-style-default .callout-title {\n  background-color: #e4d8cc !important;\n}\n</style>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}