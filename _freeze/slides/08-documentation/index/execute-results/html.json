{
  "hash": "466e50dc066907e76e67888c5287e8ed",
  "result": {
    "markdown": "---\ntitle: Function Documentation and Dependencies\nsubtitle: R Packages\nauthor: \n  - name: Heather Turner and Ella Kaye\n  - name: Department of Statistics, University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2023-06-20\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n- Documenting functions with roxygen2\n- NAMESPACE: exporting functions\n- NAMESPACE: importing functions\n\n# Function documentation with roxygen2 {.inverse}\n\n## roxygen2\n\nThe **roxygen2** package generates documentation from specially formatted comments, that we write above the function code, e.g.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#' @param x A numeric vector.\n```\n:::\n\n\n- `#'` is a roxygen comment.\n\n- `@param` is a roxygen tag.\n\n- The `@param` tag takes an argument: the name of the parameter\n\n- The remaining text (until the next tag in the file) is the documentation relevant to the tag.\n\n## Common tags\n\nThere are four tags you’ll use for most functions:\n\n<br>\n\nTag        | Purpose\n---------- | -------------\n@param arg | Describe inputs\n@examples  | Show how the function works\n@return    | Describe the return value (not needed if `NULL`)\n@export    | Add this tag if the function should be user-visible\n\n<br>\nUsual RStudio shortcuts work in the @examples section, allowing you to run code interactively.\n\n::: {.notes}\nOther important ones:\n@seealso   | Pointers to related functions\n@references\n@importFRom\n@method\n@note\n@rdname\n@keywords internal\n@format (data)\n@section\n:::\n\n## The description block\n\nThe roxygen comment should start with a description block.\n\n- First sentence is the **title**.\n- Next paragraph is the **description**.\n- Everything else is the **details** (optional).\n\n```\n#' Title in Title Case of up to 65 Characters\n#'\n#' Mandatory description of what the function does. \n#' Should be a short paragraph of a few lines only.\n#'\n#' The details section is optional and may be several paragraphs. It can even\n#' contain sub-sections (not illustrated here).\n```\n\n## RStudio helps you get started\n\nPut your cursor inside a function, then select 'Insert Roxygen Skeleton' from the Code menu.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![](images/insert_roxygen_skeleton.png)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#' Title\n#'\n#' @param animal\n#' @param sound\n#'\n#' @return\n#' @export\n#'\n#' @examples\nanimal_sounds <- function(animal, sound) {\n  stopifnot(is.character(animal) & length(animal) == 1)\n  stopifnot(is.character(sound) & length(sound) == 1)\n  paste0(\"The \", animal, \" goes \", sound, \"!\")\n}\n```\n:::\n\n:::\n\n::::\n\n## Example roxygen documentation\n\n```{.r}\n#' Sort a Numeric Vector in Decreasing Order\n#'\n#' Sort a numeric vector so that the values are in deceasing order.  \n#' Missing values are optionally removed or put last.\n#'\n#' @param x A numeric vector.\n#' @param na.rm A logical value indicating whether to remove missing values\n#' before sorting.\n#' @return A vector with the values sorted in descreasing order.\n#' @export\n#'\n#' @examples\n#' x <- c(3, 7, 2, NA)\n#' high_to_low(x)\n#' high_to_low(x, na.rm = TRUE)\n```\n\n## R documentation file\n\nroxygen2 converts the roxygen block to an `.Rd` file in the `/man` directory\n\n```\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/high_to_low.R\n\\name{high_to_low}\n\\alias{high_to_low}\n\\title{Sort a Numeric Vector in Decreasing Order}\n\\usage{\nhigh_to_low(x, na.rm = FALSE)\n}\n\\arguments{\n\\item{x}{A numeric vector.}\n\\item{na.rm}{A logical value indicating whether to remove missing values\nbefore sorting.}\n}\n\\value{\n...\n```\n\n::: {.notes}\nThis is in a toy package, **sortnum**, created for the R Forwards package development workshops:\n\nhttps://github.com/forwards/workshops/tree/master/sortnum\n:::\n\n## HTML file\n\nWhen the package is installed, the `.Rd` is converted by R to HTML on demand\n\n![](images/high_to_low.png){fig-align=\"center\"}\n\n## Regular documentation workflow\n\n![](images/documentation_workflow.png){fig-align=\"center\"}\n\n:::{.center}\nYou must have loaded the package with `load_all()` at least once.\n:::\n\n# NAMESPACE: exports {.inverse}\n\n## A namespace splits functions into two classes\n\n<br>\n\nInternal                    | External\n--------------------------- | -------------\nOnly for use within package | For use by others\nDocumentation optional      | Must be documented\nEasily changed              | Changing will break other people’s code\n\n\n## Default NAMESPACE\n\n- It is best to export functions explicitly\n- The `NAMESPACE` file as created by `usethis::create_package()` does *not* export anything by default.\n\n. . .\n\n:::{.callout-warning}\nA package created from the RStudio menus via File > New Project > New Directory > R Package creates a `NAMESPACE` that exports everything by default, with `exportPattern(\"^[[:alpha:]]+\")`\n\nThis is a good reason *not* to do this: always call `usethis::create_package()` to create a package.\n\nFor similar reasons, also avoid `package.skeleton()`.\n:::\n\n## Exporting functions\n\n```r\n#' @export\nfun1 <- function(...) {}\n```\n\nWhen we call `devtools::document()`, an `export()` directive will be added to\nNAMESPACE for each function that has an `#' @export` comment.\n\n```\n# Generated by roxygen2: do not edit by hand\n\nexport(fun1)\n```\n\n## What to export\n\nOnly export functions that you want your package users to use, i.e. those that are relevant to the purpose of the package.\n\nDon't export internal helpers, e.g.\n\n```r\n# Defaults for NULL values\n`%||%` <- function(a, b) if (is.null(a)) b else a\n\n# Remove NULLs from a list\ncompact <- function(x) {\n  x[!vapply(x, is.null, logical(1))]\n}\n```\n\n## Your turn\n\nFor the `animal_sounds` function:\n\n:::{.smaller90}\n1. Insert a Roxygen skeleton using the RStudio helper.\n2. Create a draft documentation file with `devtools::document()` or `Cmd/Ctrl + Shift + D`. If you get any warnings, make the necessary fixes.\n3. Click on \"Diff\" in the Git pane and view the changes that have been made.\n4. Preview the HTML help with `?animal_sounds`.\n5. Fill in the Roxygen skeleton for `animal_sounds()`, recreating the documentation\nfile and previewing the HTML help to view your updates.\n6. When you have finished editing, run `devtools::document()` to ensure the\n`.Rd` file is in sync. Make a git commit with your updated `R/animal_sounds.R`\nfile, the updated NAMESPACE, and the new `man/animal_sounds.Rd` file.\n:::\n\n## .Rd Markup\n\n`.Rd` files recognise LaTeX-like mark-up in most text-based fields, e.g.\n\n```\n#' This is a convenience function that is a wrapper around\n#' \\code{\\link{sort.int}}.\n```\n\nDetails can be found in the [Writing R documentation files](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Writing-R-documentation-files) section of the Writing R Extensions manual.\n\n## Using markdown\n\nMost commonly-used mark-up is easier with markdown (can be mixed with .Rd mark-up).\n\n- Text formatting: `**bold**`, `_italic_`, `` `code` ``\n\n- Create links\n\n  * To a function in the same package: `[func()]`\n  * To a function in a different package: `[pkg::func()]`\n  * With different link text, e.g. `[link text][func()]`\n\nFor more details, see the [(R)Markdown support](https://cran.r-project.org/web/packages/roxygen2/vignettes/rd-formatting.html) vignette.\n\n::: {.notes}\nSeems you no longer need to specify `pkg::` - will find the documentation in any installed package. For functions in multiple packages, e.g. `select()` help pane will offer a choice. Probably still best practice to use `pkg::` for disambiguation.\n:::\n\n## View documentation with links\n\nTo view the documentation with working links, we must install the package first.\n\n![](images/documentation_workflow2.png){fig-align=\"center\"}\n\n## Your turn\n\n1. Add some details to the help page for `animal_sounds()`, with a link to `paste0()`.\n2. Verify that no link is shown when recreating the documentation with the regular workflow.\n3. Create the documentation with the second workflow and look at the help file. Does the link to `paste0()` work?\n4. Commit all your changes to the git repo.\n\n::: {.notes}\nNow the link does seem to work when recreating the documentation with the regular workflow. Is this a change in the very latest RStudio (2023.06.0+421)?  \n:::\n\n# Dependencies {.inverse}\n\n## Dependencies\n\nDependencies are other R packages that our package uses. There are three types of dependency:\n\n**Imports**: required packages, will be installed when our package is installed\nif they are not already installed.\n\n**Suggests**: optional packages, e.g. only used for development; only used in\ndocumentation. *Not* installed automatically with our package.\n\n**Depends**: essentially deprecated for packages, may be used to specify a\nminimum required version of R (i.e., version of the core packages).\n\n## Imported packages\n\nIn DESCRIPTION\n\n```\nImports: \n    pkgname1\n    pkgname2\n```\n\nUse `::` to access functions\n```r\nnew_function <- function(x, y, z) {\n  w <- pkgname1::imported_function(x, y)\n  pkgname2::imported_function(w, z)\n}\n```\n\n## Suggested packages\n\nIn DESCRIPTION\n\n```\nSuggests: \n    pkgname\n```\n\nIn package functions or examples, handle the case where **pkgname** is not available:\n\n```r\nif (!requireNamespace(\"pkgname\", quietly = TRUE)){\n  warning(\"pkgname must be installed to perform this function\",\n          \"returning NULL\")\n  return(NULL)\n}\n```\n\n::: {.notes}\nAlso explain conditional use in vignettes later\n\nMaybe talk about rlang here as well\n:::\n\n## `use_package()`\n\n`use_package()` will modify the DESCRIPTION and remind you how to use the function.\n\nBy default, packages will be added to \"Imports\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_package(\"rlang\")\nusethis::use_package(\"glue\", type = \"Suggests\")\n```\n:::\n\n\n# NAMESPACE: imports {.inverse}\n\n## You might get tired of using `::` all the time\n\nOr you might want to use an infix function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n`%>%` <- magittr::`%>%`\n\ncol_summary <- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %>%\n    purrr::keep(is.numeric) %>%\n    purrr::modify(fun)\n}\n```\n:::\n\n\n## You can `import` functions into the package\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#' @importFrom purrr keep modify\n#' @importFrom magrittr %>%\ncol_summary <- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %>%\n    keep(is.numeric) %>%\n    modify(fun)\n}\n```\n:::\n\n\n`devtools::document()` will add corresponding `import()` statements to the NAMESPACE, e.g. `import(purr, keep, modify)`.\n\nAdding formal imports is slightly more efficient than using `::`.\n\n## Package-level import file\n\nImports belong to the package, not to individual functions, so best practice is to recognise this by storing them in a central location, e.g. `R/mypackage-package.R`\n\n```r\n#' @importFrom purrr keep modify\n#' @importFrom magrittr %>%\nNULL\n```\n\n## `usethis::use_import_from()`\n\nThere can be several steps to importing a function. `usethis::use_import_from()` takes care of all of them.\n\nIt will first create the package documentation file `R/mypackage-package.R` (if it doesn't already exist -- you will also need to agree to this).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nusethis::use_import_from(\"purrr\", c(\"keep\", \"modify\"))\n```\n:::\n\n\n```\n✔ Adding 'purrr' to Imports field in DESCRIPTION\n✔ Adding '@importFrom purrr keep', '@importFrom purrr modify' to 'R/mypackage-package.R'\n✔ Writing 'NAMESPACE'\n✔ Loading mypackage\n```\n\n::: {.notes}\nMay need to close and reopen R/mypackage-package.R to see the changes.  \n:::\n\n##  It may be tempting to import a whole package...\n\n```r\n#' @import purrr\ncol_summary <- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %>%\n    keep(is.numeric) %>%\n    map_dfc(fun)\n}\n\n```\n\n## ...but it is dangerous\n\n```r\n#' @import pkg1\n#' @import pkg2\nfun <- function(x) {\n  fun1(x) + fun2(x)\n}\n\n```\n\nWorks today...\n\n... but next year, what if **pkg2** adds a `fun1` function?\n\n## Documenting dependencies\n\n<br>\n\nDescription                 | NAMESPACE\n--------------------------- | -------------\nMakes **package** available | Makes function available\nMandatory                   | Optional (can use :: instead)\n`use_package()`             | `use_import_from()`\n\n## Example: rlang\n\nCurrently we are using `stopifnot()` for argument validation\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstopifnot(is.character(animal) & length(animal) == 1)\nstopifnot(is.character(sound) & length(sound) == 1)\n```\n:::\n\n\nWe might instead use `rlang::is_character()` with `cli::cli_abort()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rlang)\n\nsound <- c(\"woof\", \"bark\")\n\nif (!rlang::is_character(sound, 1)) {\n  cli::cli_abort(\"`sound` must be a single string!\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError:\n! `sound` must be a single string!\n```\n:::\n:::\n\n\n::: {.notes}\ncli::cli_abort() has some really nice other capability that we'll cover later  \n:::\n\n\n## Your turn\n\n1. Use `use_package()` to add `rlang` and `cli` to `Imports`.\n2. Update `animal_sounds()` to use `is_character()` and `cli_abort` to validate the arguments, using `::` to fully qualify the function calls.\n3. Load all and try giving `animal_sounds()` invalid inputs for animal and/or sound.\n4. Commit your changes to git.\n5. Push your commits for this session.\n\n# End matter {.inverse}\n\n## References\n\nWickham, H and Bryan, J, _R Packages_ (2nd edn, in progress), https://r-pkgs.org.\n\nR Core Team, _Writing R Extensions_, https://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}