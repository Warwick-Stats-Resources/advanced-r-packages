---
title: Function Documentation and Dependencies
subtitle: R Packages
author: 
  - name: Heather Turner and Ella Kaye
  - name: Department of Statistics, University of Warwick
title-slide-attributes:
  data-background-color: "#552D62"
date: 2023-06-20
date-format: long
format: 
  warwickpres-revealjs:
    execute:
      echo: true
      code-overflow: wrap
---

## Overview

- Documenting functions with roxygen2
- NAMESPACE: exporting functions
- NAMESPACE: importing functions

# Function documentation with roxygen2 {.inverse}

## roxygen2

The **roxygen2** package generates documentation from specially formatted comments, that we write above the function code, e.g.

```{r, eval = FALSE}
#' @param x A numeric vector.
```

- `#'` is a roxygen comment.

- `@param` is a roxygen tag.

- The `@param` tag takes an argument: the name of the parameter

- The remaining text (until the next tag in the file) is the documentation relevant to the tag.

## Common tags

There are four tags you’ll use for most functions:

<br>

Tag        | Purpose
---------- | -------------
@param arg | Describe inputs
@examples  | Show how the function works
@return    | Describe the return value (not needed if `NULL`)
@export    | Add this tag if the function should be user-visible

<br>
Usual RStudio shortcuts work in the @examples section, allowing you to run code interactively.

::: {.notes}
Other important ones:
@seealso   | Pointers to related functions
@references
@importFRom
@method
@note
@rdname
@keywords internal
@format (data)
@section
:::

## The description block

The roxygen comment should start with a description block.

- First sentence is the **title**.
- Next paragraph is the **description**.
- Everything else is the **details** (optional).

```
#' Title in Title Case of up to 65 Characters
#'
#' Mandatory description of what the function does. 
#' Should be a short paragraph of a few lines only.
#'
#' The details section is optional and may be several paragraphs. It can even
#' contain sub-sections (not illustrated here).
```

## RStudio helps you get started

Put your cursor inside a function, then select 'Insert Roxygen Skeleton' from the Code menu.

:::: {.columns}

::: {.column width="50%"}
![](images/insert_roxygen_skeleton.png)
:::

::: {.column width="50%"}
```{r, eval = FALSE}
#' Title
#'
#' @param animal
#' @param sound
#'
#' @return
#' @export
#'
#' @examples
animal_sounds <- function(animal, sound) {
  stopifnot(is.character(animal) & length(animal) == 1)
  stopifnot(is.character(sound) & length(sound) == 1)
  message("The ", animal, " goes ", sound, "!")
}
```
:::

::::

## Example roxygen documentation

```{.r}
#' Sort a Numeric Vector in Decreasing Order
#'
#' Sort a numeric vector so that the values are in deceasing order.  
#' Missing values are optionally removed or put last.
#'
#' @param x A numeric vector.
#' @param na.rm A logical value indicating whether to remove missing values
#' before sorting.
#' @return A vector with the values sorted in descreasing order.
#' @export
#'
#' @examples
#' x <- c(3, 7, 2, NA)
#' high_to_low(x)
#' high_to_low(x, na.rm = TRUE)
```

## R documentation file

roxygen2 converts the roxygen block to an `.Rd` file in the `/man` directory

```
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/high_to_low.R
\name{high_to_low}
\alias{high_to_low}
\title{Sort a Numeric Vector in Decreasing Order}
\usage{
high_to_low(x, na.rm = FALSE)
}
\arguments{
\item{x}{A numeric vector.}
\item{na.rm}{A logical value indicating whether to remove missing values
before sorting.}
}
\value{
...
```

::: {.notes}
This is in a toy package, **sortnum**, created for the R Forwards package development workshops:

https://github.com/forwards/workshops/tree/master/sortnum
:::

## HTML file

When the package is installed, the `.Rd` is converted by R to HTML on demand

![](images/high_to_low.png){fig-align="center"}

## Regular documentation workflow

![](images/documentation_workflow.png){fig-align="center"}

:::{.center}
You must have loaded the package with `load_all()` at least once.
:::

# NAMESPACE: exports {.inverse}

## A namespace splits functions into two classes

<br>

Internal                    | External
--------------------------- | -------------
Only for use within package | For use by others
Documentation optional      | Must be documented
Easily changed              | Changing will break other people’s code


## Default NAMESPACE

- It is best to export functions explicitly
- The `NAMESPACE` file as created by `usethis::create_package()` does *not* export anything by default.

. . .

:::{.callout-warning}
A package created from the RStudio menus via File > New Project > New Directory > R Package creates a `NAMESPACE` that exports everything by default, with `exportPattern("^[[:alpha:]]+")`

This is a good reason *not* to do this: always call `usethis::create_package()` to create a package.

For similar reasons, also avoid `package.skeleton()`.
:::

## Exporting functions

```r
#' @export
fun1 <- function(...) {}
```

When we call `devtools::document()`, an `export()` directive will be added to
NAMESPACE for each function that has an `#' @export` comment.

```
# Generated by roxygen2: do not edit by hand

export(fun1)
```

## What to export

Only export functions that you want your package users to use, i.e. those that are relevant to the purpose of the package.

Don't export internal helpers, e.g.

```r
# Defaults for NULL values
`%||%` <- function(a, b) if (is.null(a)) b else a

# Remove NULLs from a list
compact <- function(x) {
  x[!vapply(x, is.null, logical(1))]
}
```

## Your turn

For the `animal_sounds` function:

:::{.smaller90}
1. Insert a Roxygen skeleton using the RStudio helper.
2. Create a draft documentation file with `devtools::document()` or
`Cmd/Ctrl + Shift + D`.
3. Click on "Diff" in the Git pane and view the changes that have been made.
4. Preview the HTML help with `?animal_sounds`.
5. Fill in the Roxygen skeleton for `animal_sounds()`, recreating the documentation
file and previewing the HTML help to view your updates.
6. When you have finished editing, run `devtools::document()` to ensure the
`.Rd` file is in sync. Make a git commit with your updated `R/animal_sounds.R`
file, the updated NAMESPACE, and the new `man/animal_sounds.Rd` file.
:::

# End matter {.inverse}

## References

Wickham, H and Bryan, J, _R Packages_ (2nd edn, in progress), https://r-pkgs.org.

R Core Team, _Writing R Extensions_, https://cran.r-project.org/doc/manuals/r-release/R-exts.html

## License

Licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target="_blank"}).
