---
title: Rcpp Package Development
subtitle: R Packages
author: 
  - name: Heather Turner and Ella Kaye
  - name: Department of Statistics, University of Warwick
title-slide-attributes:
  data-background-color: "#552D62"
date: 2023-06-21
date-format: long
format: 
  warwickpres-revealjs:
    execute:
      echo: true
      code-overflow: wrap
---

## Overview

- Creating an Rcpp package
- Rcpp development workflow

# Creating an Rcpp package {.inverse}

## Create a version-controlled package 

Create a new package:
```{r, eval = FALSE}
usethis::create_package("~/Desktop/pkgrcpp")
```

Make your package a Git repo:
```{r, eval = FALSE}
usethis::use_git()
```

Link to GitHub:
```{r, eval = FALSE}
usethis::use_github()
```
Commit your changes to git with a message "use GitHub".

## Use Rcpp

Use Rcpp and create an initial `.cpp` file:

```{r, eval = FALSE}
usethis::use_rcpp("add_cpp")
```

- Creates a `/src` directory for our C++ files
- Sets up `src/.gitignore` to ignore compiled files
- Adds "Rcpp" to the "LinkingTo" and "Imports" fields in DESCRIPTION
- Adds `add_cpp.cpp` ready for editing.

It also copies some code to the clipboard for us to add 
to `R/<packagename>-package.R` which we must create.

## `<packagename>-package.R`

```{r, eval = FALSE}
usethis::use_r("pkgrcpp-package.R")
```

Then copy the code from the clipboard into this file:

```
## usethis namespace: start
#' @useDynLib pkgrcpp, .registration = TRUE
#' @importFrom Rcpp sourceCpp
## usethis namespace: end
NULL
```

The roxygen2 comments direct to 

 - import `Rcpp::sourceCpp`
 - add `useDynLib(pkgrcpp,".registration=TRUE")` to the NAMESPACE, so that the compiled code can be loaded and all C++ routines will be registered.

::: {.notes}
package level doc: https://stackoverflow.com/a/60750351/173755

We'll still need to create the package documentation (NAMESPACE) later.
:::

## Add an Rcpp function

`add_cpp.cpp` should already have the following code:

```{cpp, eval = FALSE}
#include <Rcpp.h>
using namespace Rcpp;
```

Edit `add_cpp.cpp` to add a C++ function and the Rcpp export comment, e.g.

```{cpp, eval = FALSE}
// [[Rcpp::export]]
double add_cpp(double x, double y) {
  double value = x + y;
  return value;
}
```

::: {.notes}
note the header #include and the special attribute
// [[Rcpp::export]]
:::

## Run Build > Document

Build > Document or Ctrl/Cmd + Shift + D now runs two functions:

- `Rcpp::compileAttributes()` looks for `// [[Rcpp::export]]` and generates
    - `src/RcppExports.cpp`: C routines wrapping exported C++ functions
    - `R/RcppExports.R`: R wrappers that call the C routines.
- `devtools::document()` that converts roxygen comments as usual, in particular updating the NAMESPACE.

    ```
    importFrom(Rcpp,sourceCpp)
    useDynLib(pkgrcpp, .registration = TRUE)
    ```

::: {.notes}
http://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf

From the menu bar it's Build > Document
From the build pane, it's Build > More > Document
:::

## R wrapper

The R wrapper generated by Rcpp is as follows, in `R/RcppExports.R`:

```{r}
# Generated by using Rcpp::compileAttributes() -> do not edit by hand
# Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

add_cpp <- function(x, y) {
    .Call(`_pkgrcpp_add_cpp`, x, y)
}
```

Currently this is an internal R function - we have not taken any action to add it as an export in the NAMESPACE.

## Try out the R wrapper

`devtools::load_all()`, Ctrl/Cmd + Shift + L, makes both internal and exported functions available for testing (without using `:::` or `::`).

```{r, eval = FALSE}
devtools::load_all()
add_ccp(3, 4)
```

::: {.notes}
This is one advantage over install and restart.

Also install and restart does not work well on Windows as the package is locked after loading with library().
:::

## Your turn

:::{.smaller90}
1. Commit the changes so far with a message "Use Rcpp and add add_cpp function".
2. Create a new `.cpp` file in the `/src` directory (using `use_rcpp` or File > New File). Save the file as `sumC.cpp`. Add the C++ function
```{cpp, eval = FALSE}
// [[Rcpp::export]]
double sumC(NumericVector x) {
  int n = x.size();
  double total = 0;
  for(int i = 0; i < n; ++i) {
    total += x[i];
  }
  return total;
}
```
3. Run Build > Document. Look at the changes to the repo by looking at the diff.
4. Run `devtools::load_all()` and try out the new function.
5. Commit your changes to git.
:::

# Rcpp development workflow {.inverse}

## Rcpp development workflow

The development workflow is the same as for R:

 - Modify Rcpp Code -> Load All -> Explore in Console.

`devtools::load_all()` will detect changes in the C++ code and 

 - Update `src/RcppExports.cpp` and `R/RcppExports.R`
 - Recompile the C++ code

## Document the R wrapper

- We only need to document the R wrapper if we plan to export it.

- The R wrapper is generated by `Rcpp::compileAttributes()`, so we cannot add roxygen comments to export or document the function there.

- Instead, we add comments above our C++ function, using `\\'`instead of `#'`.

## C++ roxygen

:::: {.columns}

::: {.column width="50%"}
In `add_cpp.cpp`
```{cpp, eval = FALSE}
//' Add Two Numbers
//'
//' Return the sum of two numbers.
//' @param x
//' @param y
//' @export
// [[Rcpp::export]]
double add_cpp(double x, double y) {
  double value = x + y;
  return value;
}
```
:::

::: {.column width="50%"}
In generated `R/RcppExports.R`
```{r, eval = FALSE}
#' Add Two Numbers
#'
#' Return the sum of two numbers.
#' @param x
#' @param y
#' @export
// [[Rcpp::export]]
add_cpp <- function(x, y) {
    .Call(`_pkgrcpp_add_cpp`, x, y)
}
```
:::

::::

## Your turn

1. Copy the documentation for `add_cpp` and add it to `add_cpp.cpp`.
2. Using the documentation for `add_cpp` as a guide, add documentation 
to `sumC.cpp`.
3. Run Build > Document to update the NAMESPACE and create the documentation files for the two R wrappers.
4. Commit your changes to git.

# End matter {.inverse}

## References

R Core Team, _Writing R Extensions_, https://cran.r-project.org/doc/manuals/r-release/R-exts.html

## License

Licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target="_blank"}).

```{=html}
<!-- needs to be last chunk of presentation otherwise creates an extra slide -->
<!-- requires Quarto v1.3 -->
<!-- tint80 for border, tint20 for title -->
<!-- this should hopefully no longer be necessary in Quarto 1.4 -->
<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->
<style type="text/css">
div.callout-note {
  border-left-color: #336695 !important;
}

div.callout-note.callout-style-default .callout-title {
  background-color: #CCD9E4 !important;
}

div.callout-caution {
  border-left-color: #AE4240 !important;
}

div.callout-caution.callout-style-default .callout-title {
  background-color: #ebd0cf !important;
}

div.callout-tip {
  border-left-color: #618157 !important;
}

div.callout-tip.callout-style-default .callout-title {
  background-color: #d8e0d5 !important;
}

div.callout-important {
  border-left-color: #775781 !important;
}

div.callout-important.callout-style-default .callout-title {
  background-color: #ddd5e0 !important;
}

div.callout-warning {
  border-left-color: #956133 !important;
}

div.callout-warning.callout-style-default .callout-title {
  background-color: #e4d8cc !important;
}
</style>
```


