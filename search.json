[
  {
    "objectID": "slides/12-Rcpp-packages/index.html#overview",
    "href": "slides/12-Rcpp-packages/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/12-Rcpp-packages/index.html#resources",
    "href": "slides/12-Rcpp-packages/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/12-Rcpp-packages/index.html#license",
    "href": "slides/12-Rcpp-packages/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/09-testing/index.html#overview",
    "href": "slides/09-testing/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/09-testing/index.html#resources",
    "href": "slides/09-testing/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/09-testing/index.html#license",
    "href": "slides/09-testing/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/11-data-publication-maintenance/index.html#overview",
    "href": "slides/11-data-publication-maintenance/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/11-data-publication-maintenance/index.html#resources",
    "href": "slides/11-data-publication-maintenance/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/11-data-publication-maintenance/index.html#license",
    "href": "slides/11-data-publication-maintenance/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/08-documentation/index.html#overview",
    "href": "slides/08-documentation/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/08-documentation/index.html#resources",
    "href": "slides/08-documentation/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/08-documentation/index.html#license",
    "href": "slides/08-documentation/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#overview",
    "href": "slides/03-classes-methods/index.html#overview",
    "title": "Classes and Methods",
    "section": "Overview",
    "text": "Overview\n\nObject-oriented programming\nS3\nS4"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#object-oriented-programming-oop",
    "href": "slides/03-classes-methods/index.html#object-oriented-programming-oop",
    "title": "Classes and Methods",
    "section": "Object-oriented programming (OOP)",
    "text": "Object-oriented programming (OOP)\nGeneric functions provide a unified interface to methods for objects of a particular class, e.g.\n\nlibrary(palmerpenguins)\n\n\nsummary(penguins$species)\n\n   Adelie Chinstrap    Gentoo \n      152        68       124 \n\nsummary(penguins$flipper_length_mm)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n    172     190     197     201     213     231       2 \n\n\nHere, we use the same function, summary(), on objects of classes factor and integer and get different output for each."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#why-use-oop",
    "href": "slides/03-classes-methods/index.html#why-use-oop",
    "title": "Classes and Methods",
    "section": "Why use OOP?",
    "text": "Why use OOP?\nsummary() could contain several if-else statements, but\n\nthe code would become hard to follow\nonly the function authors (R Core) could add new implementations\n\nOOP\n\nseparates the code for different data types\navoids duplicating code by method inheritance from parent class(es) to child class (subclass)\nmakes it possible for external developers to add methods for new types of object\n\nthis can be particularly useful when writing R packages"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#oop-systems-in-r",
    "href": "slides/03-classes-methods/index.html#oop-systems-in-r",
    "title": "Classes and Methods",
    "section": "OOP Systems in R",
    "text": "OOP Systems in R\nThere are 3 main OOP systems in use:\n\n\nS3\n\nUsed in base R and most recommended/CRAN packages\nUse unless you have good reason not to\n\nS4\n\nUsed on Bioconductor\nAllow more complex relationships between classes and methods\n\nR6\n\nMore similar to OOP in other languages\nMay prefer if S3 insufficient and not aiming for Bioconductor\n\n\nA new OOP system, S7, is in development as a successor to S3 and S4.\n\n\nR6 v similar to Python OOP (also Java, C++) Julia not an OOP language, but does have concept of multiple dispatch - so maybe a bit more like S3 idea?"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s3-objects",
    "href": "slides/03-classes-methods/index.html#s3-objects",
    "title": "Classes and Methods",
    "section": "S3 objects",
    "text": "S3 objects\nAn S3 object has a \"class\" attribute:\n\nattr(penguins$species, \"class\")\n\n[1] \"factor\"\n\nunique(penguins$species)\n\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n\nWith unclass() we obtain the underlying object, here an integer vector\n\nspecies_no &lt;- unclass(penguins$species)\nclass(species_no)\n\n[1] \"integer\"\n\nunique(species_no)\n\n[1] 1 3 2\n\nattributes(species_no)\n\n$levels\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\""
  },
  {
    "objectID": "slides/03-classes-methods/index.html#creating-an-s3-object-with-stucture",
    "href": "slides/03-classes-methods/index.html#creating-an-s3-object-with-stucture",
    "title": "Classes and Methods",
    "section": "Creating an S3 object with stucture()",
    "text": "Creating an S3 object with stucture()\nYou can use structure() to define an S3 object with a class attribute:\n\ndp &lt;- 2\nstructure(list(pi = trunc(10^dp * pi)/10^dp, dp = dp),\n          class = \"pi_trunc\")\n\n$pi\n[1] 3.14\n\n$dp\n[1] 2\n\nattr(,\"class\")\n[1] \"pi_trunc\"\n\n\nPotentially further attributes can be added at the same time, but typically we would use a list to return all the required values."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#creating-an-s3-object-with-class",
    "href": "slides/03-classes-methods/index.html#creating-an-s3-object-with-class",
    "title": "Classes and Methods",
    "section": "Creating an S3 object with class()",
    "text": "Creating an S3 object with class()\nAlternatively, we can add a class attribute using the class() helper function:\n\npi2dp &lt;- list(pi = trunc(10^dp * pi)/10^dp, dp = dp)\nclass(pi2dp) &lt;- \"pi_trunc\"\npi2dp\n\n$pi\n[1] 3.14\n\n$dp\n[1] 2\n\nattr(,\"class\")\n[1] \"pi_trunc\""
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s3-generic-functions",
    "href": "slides/03-classes-methods/index.html#s3-generic-functions",
    "title": "Classes and Methods",
    "section": "S3 Generic Functions",
    "text": "S3 Generic Functions\nS3 generic functions are simple wrappers to UseMethod()\n\nprint\n\nfunction (x, ...) \nUseMethod(\"print\")\n&lt;bytecode: 0x13edf3948&gt;\n&lt;environment: namespace:base&gt;\n\n\nThe UseMethod() function takes care of method dispatch: selecting the S3 method according to the class of the object passed as the first argument.\n\nclass(penguins$species[1:3])\n\n[1] \"factor\"\n\nprint(penguins$species[1:3])\n\n[1] Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n\n\nHere print() dispatches to the method print.factor()."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#inheritance",
    "href": "slides/03-classes-methods/index.html#inheritance",
    "title": "Classes and Methods",
    "section": "Inheritance",
    "text": "Inheritance\nThe class of an S3 object can be a vector of classes\n\nfit &lt;- glm(y ~ x, data = data.frame(y = 1:3, x = 4:6))\nclass(fit)\n\n[1] \"glm\" \"lm\" \n\n\nWe say fit is a \"glm\" object that inherits from class \"lm\".\nThe inherits() function can be used to test if an object inherits from a given class\n\ninherits(fit, \"glm\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#method-dispatch",
    "href": "slides/03-classes-methods/index.html#method-dispatch",
    "title": "Classes and Methods",
    "section": "Method dispatch",
    "text": "Method dispatch\nAn S3 object can have more than one class e.g.\n\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nUseMethod() works along the vector of classes (from the first class to the last), looks for a method for each class and dispatches to the first method it finds.\nIf no methods are defined for any of class, the default is used , e.g. print.default().\nIf there is no default, an error is thrown."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s3-methods",
    "href": "slides/03-classes-methods/index.html#s3-methods",
    "title": "Classes and Methods",
    "section": "S3 Methods",
    "text": "S3 Methods\nSee the methods for a given S3 class\n\n# nls is nonlinear least squares\nmethods(class = \"nls\")\n\n [1] anova       coef        confint     deviance    df.residual fitted     \n [7] formula     logLik      nobs        predict     print       profile    \n[13] residuals   summary     vcov        weights    \nsee '?methods' for accessing help and source code\n\n\nSee the methods for a given generic function\n\nmethods(\"coef\")\n\n[1] coef.aov*     coef.Arima*   coef.default* coef.listof*  coef.maov*   \n[6] coef.nls*    \nsee '?methods' for accessing help and source code\n\n\nAsterisked methods are not exported."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#view-s3-methods",
    "href": "slides/03-classes-methods/index.html#view-s3-methods",
    "title": "Classes and Methods",
    "section": "View S3 methods",
    "text": "View S3 methods\nS3 methods need not be in the same package as the generic.\nFind an unexported method with getS3method()\n\ngetS3method(\"coef\", \"default\")\n\nfunction (object, complete = TRUE, ...) \n{\n    cf &lt;- object$coefficients\n    if (complete) \n        cf\n    else cf[!is.na(cf)]\n}\n&lt;bytecode: 0x12e39b090&gt;\n&lt;environment: namespace:stats&gt;\n\n\nIn code, call the generic, rather than calling the method directly."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#writing-s3-methods",
    "href": "slides/03-classes-methods/index.html#writing-s3-methods",
    "title": "Classes and Methods",
    "section": "Writing S3 Methods",
    "text": "Writing S3 Methods\nThe arguments of a new method should be a superset of the arguments of the generic\n\nargs(print)\n\nfunction (x, ...) \nNULL\n\n\nNew methods have the name format generic.class:\n\nprint.pi_trunc &lt;- function(x, abbreviate = TRUE, ...){\n  dp_text &lt;- ifelse(abbreviate, \"d.p.\", \"decimal places\")\n  cat(\"pi: \", x$pi, \" (\", x$dp, \" \", dp_text, \")\", sep = \"\")\n}\nprint(pi2dp)\n\npi: 3.14 (2 d.p.)"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#nextmethod",
    "href": "slides/03-classes-methods/index.html#nextmethod",
    "title": "Classes and Methods",
    "section": "NextMethod()",
    "text": "NextMethod()\nWe can explicitly call the next method that would be called by UseMethod() to reuse code whilst customising as required\n\nbody(t.data.frame)\n\n{\n    x &lt;- as.matrix(x)\n    NextMethod(\"t\")\n}\n\n\n\nbody(rep.factor)\n\n{\n    y &lt;- NextMethod()\n    structure(y, class = class(x), levels = levels(x))\n}\n\n\nIt is possible to call NextMethod() with arguments but it is safer to recall the generic with new arguments in this case.\n\nWe have seen that UseMethod() will dispatch to the method of the next class in the class vector if a method is not defined for the first class."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#implicit-classes",
    "href": "slides/03-classes-methods/index.html#implicit-classes",
    "title": "Classes and Methods",
    "section": "Implicit classes",
    "text": "Implicit classes\nis.object() can be used to find out if an object has a class (S3/S4/R6)\n\nis.object(factor(1:3))\n\n[1] TRUE\n\nis.object(1:3)\n\n[1] FALSE\n\n\nAn object that does not have an explicit class has an implicit class that will be used for S3 method dispatch. The implicit class can be found with .class2()\n\nM &lt;- matrix(1:12, nrow = 4)\nattr(M, \"class\")\n\nNULL\n\n.class2(M)\n\n[1] \"matrix\"  \"array\"   \"integer\" \"numeric\"\n\n\n\n.class2 since R 4.0.0"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#attributes",
    "href": "slides/03-classes-methods/index.html#attributes",
    "title": "Classes and Methods",
    "section": "Attributes",
    "text": "Attributes\n\nWe can take advantage of existing S3 methods by returning an object of a existing S3 class or an implicit class, using attributes to add custom information\n\nx &lt;- matrix(c(1:5, 2*(1:5)), ncol = 2)\ncenter_x &lt;- scale(x, scale = FALSE)\nclass(center_x)\n\n[1] \"matrix\" \"array\" \n\nsummary(center_x)\n\n       V1           V2    \n Min.   :-2   Min.   :-4  \n 1st Qu.:-1   1st Qu.:-2  \n Median : 0   Median : 0  \n Mean   : 0   Mean   : 0  \n 3rd Qu.: 1   3rd Qu.: 2  \n Max.   : 2   Max.   : 4  \n\n\n\nattr(center_x, \"scaled:center\")\n\n[1] 3 6\n\n\nThis can avoid the need to define new classes and methods, in simple cases."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#your-turn-part-1",
    "href": "slides/03-classes-methods/index.html#your-turn-part-1",
    "title": "Classes and Methods",
    "section": "Your turn (part 1)",
    "text": "Your turn (part 1)\n\nCreate a function to fit an ordinary least squares model given a response y and an explanatory variable x, that returns an object of a new class \"ols\", that inherits from \"lm\".\nDefine a print method for your function that it works as follows:\n\n\nset.seed(1)\nres &lt;- ols(x = 1:3, y = rnorm(3))\nres\n\nIntercept:  -0.217 \nSlope:  -0.1046 \n\n\nNote: I have set options(digits = 4) to limit the number of digits printed by default throughout this presentation (default is 7)."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#your-turn-part-2",
    "href": "slides/03-classes-methods/index.html#your-turn-part-2",
    "title": "Classes and Methods",
    "section": "Your turn (part 2)",
    "text": "Your turn (part 2)\n\nWrite a summary method for your ols class that uses NextMethod() to compute the usual lm summary, but return an object of class \"summary.ols\".\nWrite a print method for the \"summary.ols\" which works as follows:\n\n\nsummary(res)\n\nCoefficients: \n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  -0.2170     1.1408 -0.1902   0.8804\nx            -0.1046     0.5281 -0.1980   0.8755\n\nResidual standard error:  0.7468 \nMultiple R-squared:  0.03774 \n\n\n\nwill get issues with inheriting e.g. add1 method"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#overview-of-s4",
    "href": "slides/03-classes-methods/index.html#overview-of-s4",
    "title": "Classes and Methods",
    "section": "Overview of S4",
    "text": "Overview of S4\nS4 methods\n\nuse specialised functions for creating classes, generics and methods\nallow multiple inheritance: a class can have multiple parents\nallow multiple dispatch: method selection based on the class of multiple objects\n\nThe methods package provides the functions required to use S4 classes and methods, so always load this package when using S4.\n\nuse import instead"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s4-classes",
    "href": "slides/03-classes-methods/index.html#s4-classes",
    "title": "Classes and Methods",
    "section": "S4 Classes",
    "text": "S4 Classes\nAn S4 class can be defined with setClass(), with at least two arguments\n\nA name, by convention in UpperCamelCase.\nA named character vector specifying the names and classes of the slots (fields). Using the pseudo class ANY allows a slot to accept any type of object.\n\n\nsetClass(\"Person\", \n  slots = c(\n    name = \"character\", \n    date_of_birth = \"Date\",\n    date_of_death = \"Date\",\n    age_at_death = \"numeric\"\n  )\n)"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#creating-a-new-instance",
    "href": "slides/03-classes-methods/index.html#creating-a-new-instance",
    "title": "Classes and Methods",
    "section": "Creating a new instance",
    "text": "Creating a new instance\nA new instance of the S4 object can be created using new()\n\nflorence &lt;- new(\"Person\", \n                name = \"Florence Nightingale\",\n                date_of_birth = as.Date(\"1820-05-12\"),\n                date_of_death = as.Date(\"1910-08-13\"),\n                age_at_death = 90)\nstr(florence)\n\nFormal class 'Person' [package \".GlobalEnv\"] with 4 slots\n  ..@ name         : chr \"Florence Nightingale\"\n  ..@ date_of_birth: Date[1:1], format: \"1820-05-12\"\n  ..@ date_of_death: Date[1:1], format: \"1910-08-13\"\n  ..@ age_at_death : num 90\n\n\nNote that the second onwards argument names in new are the names in the vector passed to slots() when defining the class."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#examining-s4-objects",
    "href": "slides/03-classes-methods/index.html#examining-s4-objects",
    "title": "Classes and Methods",
    "section": "Examining S4 objects",
    "text": "Examining S4 objects\nFind the type of S4 class\n\nis.object(florence)\n\n[1] TRUE\n\nisS4(florence)\n\n[1] TRUE\n\n.class2(florence)\n\n[1] \"Person\"\n\n\nExtract the value of a slot (use @)\n\ngetSlots(\"Person\")\n\n         name date_of_birth date_of_death  age_at_death \n  \"character\"        \"Date\"        \"Date\"     \"numeric\" \n\nflorence@age_at_death # or slot(florence, \"age_at_death\")\n\n[1] 90\n\n\n\nclass() will only show class itself, not classes it inherits from"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#prototype",
    "href": "slides/03-classes-methods/index.html#prototype",
    "title": "Classes and Methods",
    "section": "Prototype",
    "text": "Prototype\nThe prototype argument can be used to specify default values, enabling partial specification\n\nsetClass(\"Person\", \n  slots = c(\n    name = \"character\", \n    date_of_birth = \"Date\",\n    date_of_death = \"Date\",\n    age_at_death = \"numeric\"\n  ),\n  prototype = list(\n    name = NA_character_, \n    date_of_birth = as.Date(NA),\n    date_of_death = as.Date(NA),\n    age_at_death = NA_real_\n  )\n)\n\nBe sure to use list() not c() for prototype – easy mistake to make!"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#initialize",
    "href": "slides/03-classes-methods/index.html#initialize",
    "title": "Classes and Methods",
    "section": "initialize()",
    "text": "initialize()\nAn initialize() method can be used for more control over initialization\n\n\nsetMethod(\"initialize\", \"Person\", \n  function(.Object, ...) {\n    # initialize with default method \n    # (named arguments override defaults)\n    .Object &lt;- callNextMethod(.Object, ...)\n    \n    # compute age at death if not specified\n    year &lt;- function(x) as.numeric(format(x, \"%Y\"))\n    m_day &lt;- function(x) as.numeric(format(x, \"%m%d\"))\n    \n    if (is.na(.Object@age_at_death)){\n      n_year &lt;- year(.Object@date_of_death) - year(.Object@date_of_birth)\n      birthday &lt;- m_day(.Object@date_of_death) &gt;= m_day(.Object@date_of_birth)\n      .Object@age_at_death &lt;- n_year - !birthday\n    }\n    .Object\n  })"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#creating-a-new-s4-obect-from-an-old-one",
    "href": "slides/03-classes-methods/index.html#creating-a-new-s4-obect-from-an-old-one",
    "title": "Classes and Methods",
    "section": "Creating a new S4 obect from an old one",
    "text": "Creating a new S4 obect from an old one\n\nflorence &lt;- new(\"Person\", \n                name = \"Florence Nightingale\",\n                date_of_birth = as.Date(\"1820-05-12\"))\nstr(florence)\n\nFormal class 'Person' [package \".GlobalEnv\"] with 4 slots\n  ..@ name         : chr \"Florence Nightingale\"\n  ..@ date_of_birth: Date[1:1], format: \"1820-05-12\"\n  ..@ date_of_death: Date[1:1], format: NA\n  ..@ age_at_death : num NA\n\n\n\nflorence &lt;- initialize(florence, \n                       date_of_death = as.Date(\"1910-08-13\")) \nstr(florence)\n\nFormal class 'Person' [package \".GlobalEnv\"] with 4 slots\n  ..@ name         : chr \"Florence Nightingale\"\n  ..@ date_of_birth: Date[1:1], format: \"1820-05-12\"\n  ..@ date_of_death: Date[1:1], format: \"1910-08-13\"\n  ..@ age_at_death : num 90"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#inheritance-1",
    "href": "slides/03-classes-methods/index.html#inheritance-1",
    "title": "Classes and Methods",
    "section": "Inheritance",
    "text": "Inheritance\nThe contains argument to setClass() specifies a class or classes to inherit slots and behaviour from\n\nsetClass(\"BanknoteCharacter\", \n  contains = \"Person\", \n  slots = c(\n    denomination = \"numeric\",\n    first_issue = \"Date\",\n    last_legal = \"Date\"\n  ),\n  prototype = list(\n    denomination = NA_real_,\n    first_issue = as.Date(NA),\n    last_legal = as.Date(NA)\n  )\n)"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#new-instance-of-subclass",
    "href": "slides/03-classes-methods/index.html#new-instance-of-subclass",
    "title": "Classes and Methods",
    "section": "New instance of subclass",
    "text": "New instance of subclass\nCreating a new instance of the subclass will fill in the slots of the superclass\n\nseriesD_10GBP &lt;- new(\"BanknoteCharacter\", \n                     name = \"Florence Nightingale\", \n                     date_of_birth = as.Date(\"1820-05-12\"), \n                     date_of_death = as.Date(\"1910-08-12\"))\nstr(seriesD_10GBP)\n\nFormal class 'BanknoteCharacter' [package \".GlobalEnv\"] with 7 slots\n  ..@ denomination : num NA\n  ..@ first_issue  : Date[1:1], format: NA\n  ..@ last_legal   : Date[1:1], format: NA\n  ..@ name         : chr \"Florence Nightingale\"\n  ..@ date_of_birth: Date[1:1], format: \"1820-05-12\"\n  ..@ date_of_death: Date[1:1], format: \"1910-08-12\"\n  ..@ age_at_death : num 90"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#show-defined-s4-class",
    "href": "slides/03-classes-methods/index.html#show-defined-s4-class",
    "title": "Classes and Methods",
    "section": "Show defined S4 Class",
    "text": "Show defined S4 Class\nUse showClass() to show (print) an S4 Class\n\nshowClass(\"Person\")\n\nClass \"Person\" [in \".GlobalEnv\"]\n\nSlots:\n                                                              \nName:           name date_of_birth date_of_death  age_at_death\nClass:     character          Date          Date       numeric\n\nKnown Subclasses: \"BanknoteCharacter\""
  },
  {
    "objectID": "slides/03-classes-methods/index.html#helper-function",
    "href": "slides/03-classes-methods/index.html#helper-function",
    "title": "Classes and Methods",
    "section": "Helper function",
    "text": "Helper function\nIf a user is to create these objects, define a helper function named by the class\n\nPerson &lt;- function(name = NA, date_of_birth = NA, date_of_death = NA) {\n  new(\"Person\", \n      name = as.character(name), \n      date_of_birth = as.Date(date_of_birth), \n      date_of_death = as.Date(date_of_death))\n}\n\n\nada &lt;- Person(\"Ada Lovelace\", \"1815-12-10\", \"1852-11-27\")\nstr(ada)\n\nFormal class 'Person' [package \".GlobalEnv\"] with 4 slots\n  ..@ name         : chr \"Ada Lovelace\"\n  ..@ date_of_birth: Date[1:1], format: \"1815-12-10\"\n  ..@ date_of_death: Date[1:1], format: \"1852-11-27\"\n  ..@ age_at_death : num 36\n\n\nPut computation in the initialize method where possible, so that it can be reused by subclasses."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#validator-function",
    "href": "slides/03-classes-methods/index.html#validator-function",
    "title": "Classes and Methods",
    "section": "Validator function",
    "text": "Validator function\nUse setValidity() to check constraints beyond data type, e.g. that all slots have the same length\n\nsetValidity(\"Person\", function(object) {\n  len &lt;- vapply(slotNames(\"Person\"), \n                function(x) length(slot(object, x)),\n                numeric(1))\n  if (!all(len == len[1])){\n    \"slots should all be the same length\"\n  } else {\n    TRUE\n  }\n})\n\n\nPerson(name = c(\"Ada Lovelace\", \"Grace Hopper\"), \n       date_of_birth = \"1815-12-10\")\n\nError in validObject(.Object): invalid class \"Person\" object: slots should all be the same length"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s4-generic-functions",
    "href": "slides/03-classes-methods/index.html#s4-generic-functions",
    "title": "Classes and Methods",
    "section": "S4 generic functions",
    "text": "S4 generic functions\nS4 generic functions are (usually) a wrapper to standardGeneric(), e.g.\n\ngetGeneric(\"kronecker\")\n\nstandardGeneric for \"kronecker\" defined from package \"base\"\n\nfunction (X, Y, FUN = \"*\", make.dimnames = FALSE, ...) \nstandardGeneric(\"kronecker\")\n&lt;bytecode: 0x14849cb98&gt;\n&lt;environment: 0x14848dde0&gt;\nMethods may be defined for arguments: X, Y, FUN, make.dimnames\nUse  showMethods(kronecker)  for currently available ones.\n\n\nBy default, all arguments apart from ... are used for method dispatch."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#writing-s4-generic-functions",
    "href": "slides/03-classes-methods/index.html#writing-s4-generic-functions",
    "title": "Classes and Methods",
    "section": "Writing S4 generic functions",
    "text": "Writing S4 generic functions\nUse setGeneric to define a new generic, with the optional signature argument to specify the arguments to use for method dispatch\n\nsetGeneric(\"myGeneric\", \n  function(x, ..., verbose = TRUE) standardGeneric(\"myGeneric\"),\n  signature = \"x\"\n)\n\n[1] \"myGeneric\"\n\n\nDo not use {} in the function definition here.\nS4 generics use lowerCamelCase names by convention."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#s4-methods",
    "href": "slides/03-classes-methods/index.html#s4-methods",
    "title": "Classes and Methods",
    "section": "S4 Methods",
    "text": "S4 Methods\nS4 methods for a generic function are defined with setMethod(), which takes three main arguments\n\nThe name of the generic function.\nThe signature specifying the classes for one or more of the arguments used for method dispatch\nThe method, defined as a function with a superset of the arguments of the generic"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#writing-s4-methods",
    "href": "slides/03-classes-methods/index.html#writing-s4-methods",
    "title": "Classes and Methods",
    "section": "Writing S4 Methods",
    "text": "Writing S4 Methods\n\nargs(getGeneric(\"show\"))\n\nfunction (object) \nNULL\n\n\n\nsetMethod(\"show\", \"Person\", function(object) {\n  cat(object@name, \"\\n\",\n      \"Born: \", format(object@date_of_birth, \"%d %B %Y\"), \"\\n\",\n      \"Died: \", format(object@date_of_death, \"%d %B %Y\"), \n                \" (aged \", object@age_at_death, \")\\n\",\n      sep = \"\")\n})\nflorence\n\nFlorence Nightingale\nBorn: 12 May 1820\nDied: 13 August 1910 (aged 90)"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#accessor-generics",
    "href": "slides/03-classes-methods/index.html#accessor-generics",
    "title": "Classes and Methods",
    "section": "Accessor generics",
    "text": "Accessor generics\nIt is good practice to define generics to get and set slots that the user should have access to.\nFor example, a generic to get and set the date of birth\n\nsetGeneric(\"dob\", function(x) standardGeneric(\"dob\"))\n\n[1] \"dob\"\n\nsetGeneric(\"dob&lt;-\", function(x, value) standardGeneric(\"dob&lt;-\"))\n\n[1] \"dob&lt;-\""
  },
  {
    "objectID": "slides/03-classes-methods/index.html#accessor-methods",
    "href": "slides/03-classes-methods/index.html#accessor-methods",
    "title": "Classes and Methods",
    "section": "Accessor methods",
    "text": "Accessor methods\nMethods can then be defined for multiple classes using the same interface.\nAccess the date of birth from a Person object\n\nsetMethod(\"dob\", \"Person\", function(x) x@date_of_birth)\ndob(florence)\n\n[1] \"1820-05-12\"\n\n\nChange the date of birth\n\nsetMethod(\"dob&lt;-\", \"Person\", function(x, value) {\n  x@date_of_birth &lt;- as.Date(value)\n  validObject(x)\n  x\n})\ndob(florence) &lt;- \"1820-05-11\"\ndob(florence)\n\n[1] \"1820-05-11\""
  },
  {
    "objectID": "slides/03-classes-methods/index.html#method-dispatch-1",
    "href": "slides/03-classes-methods/index.html#method-dispatch-1",
    "title": "Classes and Methods",
    "section": "Method dispatch",
    "text": "Method dispatch\n\nOne argument, single inheritance along vector of classes:\n\nSame as for S3\n\nOne argument, multiple inheritance:\n\nFollow all possible paths from child class to parent classes\nDispatch to first method found with the shortest path\n\nMultiple dispatch\n\nAs multiple inheritance, but follow possible paths for multiple arguments\n\n\nKeep it simple: dispatch on one or two arguments usually sufficient.\nAvoid ambiguous cases by defining methods earlier in path."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#pseudo-classes",
    "href": "slides/03-classes-methods/index.html#pseudo-classes",
    "title": "Classes and Methods",
    "section": "Pseudo-classes",
    "text": "Pseudo-classes\nMethods can be defined for the ANY pseudo-class\n\nOnly selected if no method found for real classes\n\nThe MISSING pseudo-class is useful for dispatch on two arguments: allow different behaviour if only one argument specified."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#your-turn",
    "href": "slides/03-classes-methods/index.html#your-turn",
    "title": "Classes and Methods",
    "section": "Your turn",
    "text": "Your turn\n\n\nCreate an S4 class Diag to represent a diagonal matrix with two slots:\n\n\nn the number of rows/cols\nx the numeric values of the diagonal elements Add a prototype to specify default values.\n\n\nTest your class by creating a new instance first without providing any values for the slots and then providing some example values.\nCreate an initialize method so that the n slot is computed automatically and does not have to be provided.\nCreate a Diag() helper function to create a new Diag object, with the user only having to specify the off-diaognal elements.\nCreate a show method to state the size of the matrix and print the off-diagonal elements."
  },
  {
    "objectID": "slides/03-classes-methods/index.html#references",
    "href": "slides/03-classes-methods/index.html#references",
    "title": "Classes and Methods",
    "section": "References",
    "text": "References\n\nMain reference for this session, goes a bit further (including R6): Wickham, H, Advanced R (2nd edn), Object-oriented programming section, https://adv-r.hadley.nz/oo.html\nFun example creating Turtle and TurtleWithPen classes to create simple graphics by moving the turtle: https://stuartlee.org/2019/07/09/s4-short-guide/"
  },
  {
    "objectID": "slides/03-classes-methods/index.html#license",
    "href": "slides/03-classes-methods/index.html#license",
    "title": "Classes and Methods",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#overview",
    "href": "slides/04-efficient-programming/index.html#overview",
    "title": "Efficient Programming",
    "section": "Overview",
    "text": "Overview\n\nMemory management\nBenchmarking\nImproving run time\nParallelisation\nOutlook to package development"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#overview-1",
    "href": "slides/04-efficient-programming/index.html#overview-1",
    "title": "Efficient Programming",
    "section": "Overview",
    "text": "Overview\nObjects created in R are stored in memory. This has the advantage that objects can be accessed faster, but R slows down as the memory fills up. Creating objects also takes time.\nTherefore:\n\n\nRe-use temporary variables. The allocated storage will be re-used if the vector has the same length.\nSave results for re-use, e.g. index variables\nDon’t save intermediate results unnecessarily – compute on-the-fly\nRemove large objects when no longer needed (with rm())"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#basic-data-structures",
    "href": "slides/04-efficient-programming/index.html#basic-data-structures",
    "title": "Efficient Programming",
    "section": "Basic data structures",
    "text": "Basic data structures\nTry to use the simplest data structure for your purpose\n\nmatrices vs. data frames\ncharacter or integer vectors vs. factors\nlogical or integer vectors vs. numeric vectors\nunnamed objects vs. named objects\n\n\nIt is especially important to use low-level structures for computation\nYou can create richer objects as a final step before returning to the user.\n\nL for integer"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#big-data",
    "href": "slides/04-efficient-programming/index.html#big-data",
    "title": "Efficient Programming",
    "section": "Big Data",
    "text": "Big Data\nModern computers have enough RAM to work with millions of records using standard functions.\nSome packages to work more efficiently with big data:\n\ndata.table faster operations on data frames; read/write large CSVs\ndplyr + dbplyr processing of data in databases.\narrow read/write large CSVs or binary files e.g. Parquet; processing larger-than-memory data with dplyr commands.\nbigmemory, biganalytics faster matrix operations, generalized linear models, kmeans\n\n\nN.B. sparse matrices not as efficient as you might expect for general programming, may need big data for it to be important.\nParallelisation can also help, see later"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#growing-objects",
    "href": "slides/04-efficient-programming/index.html#growing-objects",
    "title": "Efficient Programming",
    "section": "Growing Objects",
    "text": "Growing Objects\nAdding to an object in a loop\n\nres &lt;- NULL\nfor (i in 1:5000) res &lt;- c(res, 1)\n\nmay force a copy to be made at each iteration, with each copy stored until the loop has completed.\n\nIt is far better to create an object of the necessary size first\n\nres &lt;- numeric(5000)\nfor (i in seq_along(res)) res[i] &lt;- 1\n\nTo initialise a list we can use\n\nres &lt;- vector(mode = \"list\", length = 100)"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#copy-on-change",
    "href": "slides/04-efficient-programming/index.html#copy-on-change",
    "title": "Efficient Programming",
    "section": "Copy-on-Change",
    "text": "Copy-on-Change\nR usually copies an object to make changes to it.\ntracemem can be used to trace copies of an object\n\nz &lt;- NULL\nfor (i in 1:3){ z &lt;- c(z,1); print(tracemem(z)) }\n\n[1] \"&lt;0x11b5aac88&gt;\"\n[1] \"&lt;0x13b299908&gt;\"\n[1] \"&lt;0x12b07f0f8&gt;\"\n\n\n\n\nz &lt;- numeric(2); print(tracemem(z))\n\n[1] \"&lt;0x15b8f3788&gt;\"\n\n\n\n\n\nfor (i in 1:2){z[i] &lt;- i;print(tracemem(z))}\n\ntracemem[0x15b8f3788 -&gt; 0x15bbaaa08]: eval eval eval_with_user_handlers withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n[1] \"&lt;0x15bbaaa08&gt;\"\n[1] \"&lt;0x15bbaaa08&gt;\"\n\n\n\nmakes copy for each separate block of code e.g. if run with above in one go interactively no copies if run in separate chunks 1 copy"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#benchmarking-1",
    "href": "slides/04-efficient-programming/index.html#benchmarking-1",
    "title": "Efficient Programming",
    "section": "Benchmarking",
    "text": "Benchmarking\nThere will usually be many ways to write code for a given task. To compare alternatives, we can use benchmark the code.\nIf the code is more than a single expression, create wrappers for each alternative\n\ngrow &lt;- function(n){\n  res &lt;- NULL\n  for (i in 1:n) res &lt;- c(res, 1)\n  res\n}\npre_specify &lt;- function(n){\n  res &lt;- numeric(n)\n  for (i in seq_along(res)) res[i] &lt;- 1\n  res\n}"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#benchmark",
    "href": "slides/04-efficient-programming/index.html#benchmark",
    "title": "Efficient Programming",
    "section": "bench::mark()",
    "text": "bench::mark()\nRun the two alternatives with bench::mark(). This function\n\nRuns alternatives ≥ 1 time; at most enough times to take 0.5s\nMakes sure the two expressions return the same result!\n\n\n\nlibrary(bench)\n(bm &lt;- bench::mark(grow(5000), pre_specify(5000)))\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n\n\n# A tibble: 2 × 6\n  expression             min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt;        &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 grow(5000)          25.6ms   28.3ms      33.8    95.6MB    61.7 \n2 pre_specify(5000)   98.9µs    105µs    9196.     55.8KB     8.00\n\n\n\nGC is the garbage collector which tidies up deleted objects\nitr/sec is how many times the expression could be run in 1s"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#plotting-benchmarks",
    "href": "slides/04-efficient-programming/index.html#plotting-benchmarks",
    "title": "Efficient Programming",
    "section": "Plotting benchmarks",
    "text": "Plotting benchmarks\nDistribution tends to be right-skewed - focus on the median!\n\nplot(bm)"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#scaling",
    "href": "slides/04-efficient-programming/index.html#scaling",
    "title": "Efficient Programming",
    "section": "Scaling",
    "text": "Scaling\nBenchmarking can be difficult as the best option can depend on the size of the data, e.g. memory allocation can overshadow run time for small objects.\nWhen thinking about how our code scales to bigger, we need to consider what we mean by “big”\n\nnumber of rows or number of columns?\nnumber of observations or number of factor levels?\n\nbench::press() compares a function over a grid of parameters"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#benchpress",
    "href": "slides/04-efficient-programming/index.html#benchpress",
    "title": "Efficient Programming",
    "section": "bench::press()",
    "text": "bench::press()\n\n\nbench::press(n = c(10, 100), k = c(10, 1),\n  bench::mark(gl(n, k, length = 1000)) # `gl` generates factor levels\n)\n\nRunning with:\n      n     k\n\n\n1    10    10\n\n\n2   100    10\n\n\n3    10     1\n\n\n4   100     1\n\n\n# A tibble: 4 × 8\n  expression                  n     k    min median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt;              &lt;dbl&gt; &lt;dbl&gt; &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 gl(n, k, length = 1000)    10    10 3.08µs  3.4µs   259050.    12.4KB     25.9\n2 gl(n, k, length = 1000)   100    10 8.86µs 9.88µs    98407.   11.05KB     19.7\n3 gl(n, k, length = 1000)    10     1 2.75µs 3.12µs   300903.    3.95KB     30.1\n4 gl(n, k, length = 1000)   100     1 5.82µs  6.6µs   145322.    7.53KB     29.1"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#exercise-1",
    "href": "slides/04-efficient-programming/index.html#exercise-1",
    "title": "Efficient Programming",
    "section": "Exercise 1",
    "text": "Exercise 1\nSuppose we have a matrix of data and a two-level factor\n\nnr &lt;- 10\nnc &lt;- 50\nX &lt;- matrix(rnorm(nr * nc, 10, 3), nrow = nr)\ngrp &lt;- gl(2, nc/2)\n\nUse bench::mark() to compare the following ways to find the coefficients of a linear model fitted to each row\n\n# one\nres &lt;- vector(\"list\", nr)\nfor(i in seq_len(nr)){\n  res[[i]] &lt;- coef(lm(X[i,] ~ grp))\n}\ndo.call(\"cbind\", res)\n# two\nres2 &lt;- coef(lm(t(X) ~ grp))"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#faster-common-operations",
    "href": "slides/04-efficient-programming/index.html#faster-common-operations",
    "title": "Efficient Programming",
    "section": "Faster common operations",
    "text": "Faster common operations\n\nSorting\n\nUse sort(x, partial = 1:10) to get the top 10\nUse sort(x, decreasing = TRUE) vs rev(sort(x))\n\n\n\n\nGenerating numeric vectors\n\nseq.int(), seq_along(x), seq_len(n) vs seq()\n\nrep.int() or rep_len(n) vs rep()\n\n\n\n\n\nwhich.min(), which.max() vs e.g. which(x == min(x))\n\n\n\n\nanyNA(x) vs any(is.na(x))\n\n\n“int” stands for internal!"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#for-loops",
    "href": "slides/04-efficient-programming/index.html#for-loops",
    "title": "Efficient Programming",
    "section": "For loops",
    "text": "For loops\nFor loops are an intuitive way to write code, but can be very inefficient.\nfor is a function, : or seq_along is another function, each use of [ is a call to a function, …, so a loop involves many nested function calls.\n\nTry to keep for loops for truly iterative computations or tasks that are fast in any case (optimizing code takes time!)\nOtherwise make loops as lean as possible, by pre-computing values that do not need be be computed iteratively."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#vectorization",
    "href": "slides/04-efficient-programming/index.html#vectorization",
    "title": "Efficient Programming",
    "section": "Vectorization",
    "text": "Vectorization\nVectorization is operating on vectors (or vector-like objects) rather than individual elements.\nMany operations in R are vectorized, e.g.\n\nx &lt;- 1:3\ny &lt;- 3:1\nx == y\n\n[1] FALSE  TRUE FALSE\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nres &lt;- list(a = 1:3, b = 1:6)\nlengths(res)\n\na b \n3 6 \n\n\nWe do not need to loop through each element!"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#recycling",
    "href": "slides/04-efficient-programming/index.html#recycling",
    "title": "Efficient Programming",
    "section": "Recycling",
    "text": "Recycling\nVectorized functions will recycle shorter vectors to create vectors of the same length\n\n1:4 + 0:1 + 2 # 1+0+2, 2+1+2, 3+0+2, 4+1+2\n\n[1] 3 5 5 7\n\n\nThis is particularly useful for single values\n\ncbind(1, 3:4)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    1    4\n\n\nand for generating regular patterns\n\npaste0(rep(1:3, each = 2), c(\"a\", \"b\"))\n\n[1] \"1a\" \"1b\" \"2a\" \"2b\" \"3a\" \"3b\""
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#ifelse",
    "href": "slides/04-efficient-programming/index.html#ifelse",
    "title": "Efficient Programming",
    "section": "ifelse()",
    "text": "ifelse()\nifelse is a vectorised version of if and else blocks\n\nx &lt;- c(5, 2, 9, 12)\nifelse(x &gt; 6, 2 * x, 3 * x)\n\n[1] 15  6 18 24\n\n\nRecycling is also very useful here\n\nx &lt;- 1:10\nifelse(x %% 2 == 0, 5, 12)\n\n [1] 12  5 12  5 12  5 12  5 12  5\n\n\nHowever indexing is more efficient than ifelse\n\ny &lt;- rep.int(12, 10)\ny[x %% 2 == 0] &lt;- 5\ny\n\n [1] 12  5 12  5 12  5 12  5 12  5"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#logical-operations",
    "href": "slides/04-efficient-programming/index.html#logical-operations",
    "title": "Efficient Programming",
    "section": "Logical operations",
    "text": "Logical operations\nLogical operators such as & and | are vectorized, e.g.\n\nx &lt;- c(1, 0.6, 1.2, 0.4, 0.5)\nx &gt; 0.4 & x &lt; 0.8\n\n[1] FALSE  TRUE FALSE FALSE  TRUE\n\n\nIf we only want to compare vectors of length 1 the operators && and || are more efficient as they only compute the RHS if needed\n\nx[1] &gt; 0.4 && x[1] &lt; 0.8\n\n[1] FALSE\n\n\nMake sure the vectors are of length 1, otherwise you get an error. This change was introduced in R ≥ 4.3.\n\nx &gt; 0.4 && x &lt; 0.8\n\nError in x &gt; 0.4 && x &lt; 0.8: 'length = 5' in coercion to 'logical(1)'\n\n\n\nIn R &ge 4.2.0 you get a warning but it still returns a comparison of only the first element. In earlier versions, there was no warning."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#vectorization-and-matrices",
    "href": "slides/04-efficient-programming/index.html#vectorization-and-matrices",
    "title": "Efficient Programming",
    "section": "Vectorization and Matrices",
    "text": "Vectorization and Matrices\nVectorizations applies to matices too, not only through matrix algebra\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nM + M\n\n     [,1] [,2]\n[1,]    2    6\n[2,]    4    8\n\n\nbut also vectorized functions\n\nM &lt;- M + rep(1.3, 4)\nround(M)\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    3    5"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#matrices-and-recycling",
    "href": "slides/04-efficient-programming/index.html#matrices-and-recycling",
    "title": "Efficient Programming",
    "section": "Matrices and Recycling",
    "text": "Matrices and Recycling\nValues are recycled down matrix, which is convenient for row-wise operations\n\nM &lt;- matrix(1:6, nrow = 2, ncol = 3)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nM - 1:2\n\n     [,1] [,2] [,3]\n[1,]    0    2    4\n[2,]    0    2    4\n\n\nTo do the same for columns we would need to explicitly replicate, which is not so efficient.\n\nM - rep(1:3, each = 2)\n\n     [,1] [,2] [,3]\n[1,]    0    1    2\n[2,]    1    2    3"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#apply",
    "href": "slides/04-efficient-programming/index.html#apply",
    "title": "Efficient Programming",
    "section": "apply()",
    "text": "apply()\napply provides a way to apply a function to every row or column of a matrix\n\nM &lt;- matrix(1:20, 2, 10)\nM\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    3    5    7    9   11   13   15   17    19\n[2,]    2    4    6    8   10   12   14   16   18    20\n\n# MARGIN 1 over rows\napply(M, 1, quantile, 0.75)\n\n[1] 14.5 15.5\n\n# MARGIN 2 over columns\napply(M, 2, mean)\n\n [1]  1.5  3.5  5.5  7.5  9.5 11.5 13.5 15.5 17.5 19.5"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#lapply",
    "href": "slides/04-efficient-programming/index.html#lapply",
    "title": "Efficient Programming",
    "section": "lapply()",
    "text": "lapply()\nlapply applies a given function to each element of a list\n\nl &lt;- list()\nl$x &lt;- 1:3\nl$y &lt;- 4:6\nlapply(l, mean)\n\n$x\n[1] 2\n\n$y\n[1] 5"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#sapply-and-vapply",
    "href": "slides/04-efficient-programming/index.html#sapply-and-vapply",
    "title": "Efficient Programming",
    "section": "sapply() and vapply()",
    "text": "sapply() and vapply()\nsapply acts similarly to lapply, but tries to simplify the result\n\nsapply(l, mean)\n\nx y \n2 5 \n\n\nIt is better to use vapply() in programming as it ensures the returned object is of the expected type (and is slightly faster)\n\nvapply(l, mean, numeric(1))\n\nx y \n2 5"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#rowcolumn-wise-operations",
    "href": "slides/04-efficient-programming/index.html#rowcolumn-wise-operations",
    "title": "Efficient Programming",
    "section": "Row/Column-wise Operations",
    "text": "Row/Column-wise Operations\nSeveral functions are available implementing efficient row/column-wise operations, e.g. colMeans(), rowMeans(), colSums(), rowSums(), sweep()\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nrowMeans(M)\n\n[1] 2 3\n\n\nThese provide an alternative to iterating though rows and columns in R (the iteration happens in C, which is faster).\nThe matrixStats provides further “matricised” methods, including medians and standard deviations."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#exercise-2-ht-raju-bhakta",
    "href": "slides/04-efficient-programming/index.html#exercise-2-ht-raju-bhakta",
    "title": "Efficient Programming",
    "section": "Exercise 2 (h/t Raju Bhakta)",
    "text": "Exercise 2 (h/t Raju Bhakta)\nSampling from 0.3 × N(0, 1) + 0.5 × N(10, 1) + 0.2 × N(3, 0.1):\n\n# Set the random seed and the number of values to sample\nset.seed(1); n &lt;- 100000                 \n\n# Sample the component each value belongs to\ncomponent &lt;- sample(1:3, prob = c(0.3, 0.5, 0.2), \n                    size = n, replace = TRUE)\n\n# Sample from the corresponding Normal for each value\nx &lt;- numeric(n)\nfor(i in seq_len(n)){\n  if (component[i] == 1){\n    x[i] &lt;- rnorm(1, 0, 1)\n  } else if (component[i] == 2) {\n    x[i] &lt;- rnorm(1, 10, 1)\n  } else {\n    x[i] &lt;- rnorm(1, 3, sqrt(0.1))\n  }\n}"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#exercise-2-continued",
    "href": "slides/04-efficient-programming/index.html#exercise-2-continued",
    "title": "Efficient Programming",
    "section": "Exercise 2 (continued)",
    "text": "Exercise 2 (continued)\nThe for loop in the previous code is suitable for vectorization: the iterations are completely independent.\nrnorm() is vectorized in the arguments mu and sd, e.g. to simulate a value from the 1st and 3rd component we could write:\n\nmu &lt;- c(0, 10, 3)\nsd &lt;- sqrt(c(1, 1, 0.1))\nrnorm(2, mu[c(1, 3)], sd[c(1, 3)])\n\n[1] -0.9814571  3.1011124\n\n\nUse this information to replace the for loop, using a single call to rnorm() to simulate n values from the mixture distribution.\nUse bench::mark() to compare the two approaches - don’t forget to set the same seed so the simulations are equivalent!"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#parallelisation-1",
    "href": "slides/04-efficient-programming/index.html#parallelisation-1",
    "title": "Efficient Programming",
    "section": "Parallelisation",
    "text": "Parallelisation\nMost functions in R run on a single core of your machine. The future.apply package, part of the futureverse, provides parallel versions of all the apply-type functions.\nhttps://www.futureverse.org\nParallelisation is most straight-forward to implement for embarrassingly parallel problems, such as applying a function to elements of a list."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#example-setup",
    "href": "slides/04-efficient-programming/index.html#example-setup",
    "title": "Efficient Programming",
    "section": "Example setup",
    "text": "Example setup\nAdapted from https://henrikbengtsson.github.io/course-stanford-futureverse-2023/\nLet’s create a slow function:\n\nslow_sum &lt;- function(x) {\n  sum &lt;- 0\n  \n  for (value in x) {\n    Sys.sleep(0.5)  ## half-second slowdown per value\n    sum &lt;- sum + value\n  }\n  \n  sum\n}\n\n\nlibrary(tictoc)\ntic()\ny &lt;- slow_sum(1:10)\ntoc()\n\n5.032 sec elapsed"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#parallelising-map-reduce-calls",
    "href": "slides/04-efficient-programming/index.html#parallelising-map-reduce-calls",
    "title": "Efficient Programming",
    "section": "Parallelising map-reduce calls",
    "text": "Parallelising map-reduce calls\nNow suppose we have four sets of numeric vectors, in a list, and we want to calculate slow_sum() for each:\n\nxs &lt;- list(1:10, 11:20, 21:30, 31:40)\n\nWe could run lapply() over this, but it takes a while as it handles each list item in turn:\n\ntic()\nys &lt;- lapply(xs, slow_sum)\ntoc()\n\n20.139 sec elapsed"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#setting-up-for-parallel-processing",
    "href": "slides/04-efficient-programming/index.html#setting-up-for-parallel-processing",
    "title": "Efficient Programming",
    "section": "Setting up for parallel processing",
    "text": "Setting up for parallel processing\nThe future.apply package comes to the rescue!\nThe first step is to make a cluster from the available cores.\nTo parallelise on a local machine, use multisession in plan():\n\nlibrary(future.apply)\nplan(multisession)\n\nThe default number of workers is availableCores().\nWe’ll also use the tictoc package for timings:\n\nlibrary(tictoc)"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#using-future_lapply",
    "href": "slides/04-efficient-programming/index.html#using-future_lapply",
    "title": "Efficient Programming",
    "section": "Using future_lapply()",
    "text": "Using future_lapply()\nfuture_lapply() is a drop-in parallel replacement for lapply()\n\nplan(multisession, workers = 4)\n\n\ntic()\nys &lt;- future_lapply(xs, slow_sum)\ntoc()\n\n5.266 sec elapsed\n\n\nThe four slow sums are calculated in about the same time as it takes to calculate one, since they are being calculated simultaneously on separate cores."
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#your-turn",
    "href": "slides/04-efficient-programming/index.html#your-turn",
    "title": "Efficient Programming",
    "section": "Your turn!",
    "text": "Your turn!\nThe efficient package contains a function to simulate a game of snakes and ladders, returning the number of rolls required to win.\n\nremotes::install_github(\"csgillespie/efficient\",\n                         INSTALL_opts = \"--with-keep.source\")\n\nParallelise the following code:\n\nlibrary(efficient)\nN &lt;- 100\nnrolls &lt;- sapply(seq_len(N), snakes_ladders)\n\nUse tictoc to compare the run-times. Roughly large does N have to be for the parallel version to be worth using?"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#general-principles",
    "href": "slides/04-efficient-programming/index.html#general-principles",
    "title": "Efficient Programming",
    "section": "General Principles",
    "text": "General Principles\n\nTry to use vectorized functions where possible.\nOtherwise use the apply family (and parellelise if necessary). Custom functions will often be useful here to pass to apply etc.\nTry to keep for loops for true iterative computations or tasks that are fast in any case (optimizing code takes time!)"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#references",
    "href": "slides/04-efficient-programming/index.html#references",
    "title": "Efficient Programming",
    "section": "References",
    "text": "References\nGood references on optimizing R code:\n\nWickham, H, Advanced R (2nd edn), Improving performance section, https://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming, https://csgillespie.github.io/efficientR/\n\nTutorials on the Futureverse:\n\nhttps://www.futureverse.org/tutorials.html"
  },
  {
    "objectID": "slides/04-efficient-programming/index.html#license",
    "href": "slides/04-efficient-programming/index.html#license",
    "title": "Efficient Programming",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#overview",
    "href": "slides/06-r-with-cpp/index.html#overview",
    "title": "C++ and Rcpp",
    "section": "Overview",
    "text": "Overview\n\nWhen to use C++\nGetting set up\nC++ basics and Rcpp\nRcpp sugar"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#limits-of-r",
    "href": "slides/06-r-with-cpp/index.html#limits-of-r",
    "title": "C++ and Rcpp",
    "section": "Limits of R",
    "text": "Limits of R\nSometimes you reach the limits of R:\n\nYour code is still slow despite optimizing the computational approach and the R implementation\nYou could speed up the R code, but it results in very obscure, convoluted code\n\nIn this case it can make sense to code parts in C++."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#typical-scenarios",
    "href": "slides/06-r-with-cpp/index.html#typical-scenarios",
    "title": "C++ and Rcpp",
    "section": "Typical scenarios",
    "text": "Typical scenarios\nThere are some typical scenarios where C++ is likely to be a good idea\n\nLoops that can’t be vectorized because iterations depend on previous results\nRecursive functions, or problems which involve calling functions millions of times.\nProblems that require advanced data structures and algorithms that R doesn’t provide.\n\n\nThe overhead of calling a function in C++ is much lower than in R."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#set-up-to-use-c",
    "href": "slides/06-r-with-cpp/index.html#set-up-to-use-c",
    "title": "C++ and Rcpp",
    "section": "Set up to use C++",
    "text": "Set up to use C++\nTo use C++, you need a working C++ compiler.\nOn MacOS/Windows there is some setup to do, but it will also set you up to\n\nDevelop packages in R\nInstall packages from GitHub that include C/C++ code\n\nOn Linux, you will usually have a C++ compiler installed, but you might as well get set up to develop R packages too.\n\nIf you’ve followed the development tools section of the course prerequisites, you should be fully set-up for this already."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#linux",
    "href": "slides/06-r-with-cpp/index.html#linux",
    "title": "C++ and Rcpp",
    "section": "Linux",
    "text": "Linux\nDebian/Ubuntu:\napt-get update\napt-get install r-base-dev\nFedora/RedHat: should be set up already."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#macos",
    "href": "slides/06-r-with-cpp/index.html#macos",
    "title": "C++ and Rcpp",
    "section": "MacOS",
    "text": "MacOS\nOption 1\n\nRegister as an Apple developer (for free)\n\nThen, in the terminal:\nxcode-select --install\n\n\nOption 2\n\nInstall the current release of full Xcode from the Mac App Store\nWithin XCode go to Preferences -&gt; Downloads and install the Command Line Tools\nMore convenient but installs a lot you don’t need"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#windows",
    "href": "slides/06-r-with-cpp/index.html#windows",
    "title": "C++ and Rcpp",
    "section": "Windows",
    "text": "Windows\n\nDownload the Rtools installer that matches your version of R from https://cran.r-project.org/bin/windows/Rtools/\nRun the installer, Rtools.exe, keeping the default settings."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#a-first-c-function",
    "href": "slides/06-r-with-cpp/index.html#a-first-c-function",
    "title": "C++ and Rcpp",
    "section": "A first C++ function",
    "text": "A first C++ function\nConsider an R function add_r() to add two numbers\n\nadd_r &lt;- function(x, y) x + y\n\nHere’s how we might write an equivalent add_cpp() function in C++\n\ndouble add_cpp(double x, double y) { \n  double value = x + y;\n  return value;\n}\n\n\nThe type for the return value is declared first\nThe type of each argument must be declared\nThe type of intermediate objects must be declared\nReturn statements must use return"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#rcpp",
    "href": "slides/06-r-with-cpp/index.html#rcpp",
    "title": "C++ and Rcpp",
    "section": "Rcpp",
    "text": "Rcpp\nTo use add_cpp() in R we need to compile the C++ code and construct an R function that connects to the compiled C++ function.\nThe R package Rcpp takes care of these steps for us.\nOne way is to use the cppFunction(), e.g.\n\nlibrary(Rcpp)\ncppFunction('\n  double add_cpp(double x, double y) {\n    double value = x + y;\n    return value;\n  }\n')"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#using-the-c-function",
    "href": "slides/06-r-with-cpp/index.html#using-the-c-function",
    "title": "C++ and Rcpp",
    "section": "Using the C++ function",
    "text": "Using the C++ function\nAfter defining add_cpp() via cppFunction(), add_cpp() is available to use as a R function\n\nadd_cpp\n\nfunction (x, y) \n.Call(&lt;pointer: 0x100300b40&gt;, x, y)\n\nadd_cpp(3, 5)\n\n[1] 8"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#stand-alone-c-files",
    "href": "slides/06-r-with-cpp/index.html#stand-alone-c-files",
    "title": "C++ and Rcpp",
    "section": "Stand-alone C++ files",
    "text": "Stand-alone C++ files\nIt is better to define functions in C++ files (extension .cpp). These files will be recognised by RStudio and other IDEs, with the usual benefits.\nThe C++ file should have these lines at the top:\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n\nThe compiler will locate the Rcpp header file with functions and class definitions supplied by Rcpp and include the contents.\nAdding the namespace means that we can use Rcpp functions in the C++ code without prefixing the function names by Rcpp::.\n\nAbove each function we want to use in R, add // [[Rcpp::export]]"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-c-file",
    "href": "slides/06-r-with-cpp/index.html#example-c-file",
    "title": "C++ and Rcpp",
    "section": "Example C++ file",
    "text": "Example C++ file\nThe following is in the file add_cpp2.cpp\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble add_cpp2(double x, double y) {\n  double value = x + y;\n  return value;\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#sourcecpp",
    "href": "slides/06-r-with-cpp/index.html#sourcecpp",
    "title": "C++ and Rcpp",
    "section": "sourceCpp()",
    "text": "sourceCpp()\nNow we can use sourceCpp() to make the C++ functions available in R\n\npath &lt;- here::here(\"C++\", \"add_cpp2.cpp\")\nsourceCpp(path)\nadd_cpp2(5, 9)\n\n[1] 14"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#benefits-of-separate-c-files",
    "href": "slides/06-r-with-cpp/index.html#benefits-of-separate-c-files",
    "title": "C++ and Rcpp",
    "section": "Benefits of separate C++ files",
    "text": "Benefits of separate C++ files\nThere are a number of benefits to writing C++ code in separate .cpp files, compared to cppFunction()\n\nsyntax highlighting\navoid mistakes switching from R to C code\nline numbers for compilation errors\nhighlighting errors (e.g. missing “;”)"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#c-basics",
    "href": "slides/06-r-with-cpp/index.html#c-basics",
    "title": "C++ and Rcpp",
    "section": "C++ Basics",
    "text": "C++ Basics\n\nEvery statement within { } must be terminated by a ;.\nUse = for assignment (&lt;- is not valid).\nAddition, subtraction, multiplication and division use the same operators as R (+, -, *, /).\nComparison operators are the same as R (==, !=, &gt;, etc)\nOne-line comments start with //.\nMulti-line comments use /* */ delimiters\n\n/*\nExample\nmulti-line comment\n*/"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#data-types",
    "href": "slides/06-r-with-cpp/index.html#data-types",
    "title": "C++ and Rcpp",
    "section": "Data types",
    "text": "Data types\nThe basic C++ data types are scalars. Rcpp provides vector versions  \n\n\n\nR\nC++ (scalar)\nRcpp (vector)\n\n\n\n\nnumeric\ndouble\nNumericVector\n\n\ninteger\nint\nIntegerVector\n\n\ncharacter\nchar\nCharacterVector\n\n\nlogical\nbool\nLogicalVector\n\n\n\n\nRcpp also provides String as an alternative to char\n\nCare needed with NA double: more bits used to represent a real number vs single precision - range 2-(210) to 2(210). vs same with 2^7 - precision ~15 d.p. vs 7"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-no-inputs-scalar-output",
    "href": "slides/06-r-with-cpp/index.html#example-no-inputs-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: no inputs, scalar output",
    "text": "Example: no inputs, scalar output\n\nint one() {\n  return 1;\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-ifelse-scalar-input-scalar-output",
    "href": "slides/06-r-with-cpp/index.html#example-ifelse-scalar-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: if/else (scalar input, scalar output)",
    "text": "Example: if/else (scalar input, scalar output)\n\nint signC(int x) {\n  if (x &gt; 0) {\n    return 1;\n  } else if (x == 0) {\n    return 0;\n  } else {\n    return -1;\n  }\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#for-loop-syntax",
    "href": "slides/06-r-with-cpp/index.html#for-loop-syntax",
    "title": "C++ and Rcpp",
    "section": "For loop syntax",
    "text": "For loop syntax\nA C++ for loop has the form\n\nfor (int i = 0; i &lt; n; ++i) {\n  total += x[i];\n}\n\n\nSyntax: for (initialisation; condition; increment)\n\nInitialize integer i at zero\nContinue as long as i is less than n\nIncrement i by 1 after each iteration\n\n++i is equivalent to i = i + 1\n\n\ntotal += x[i] is equivalent to total = total + x[i]\nVector indices start at zero"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-for-loop-vector-input-scalar-output",
    "href": "slides/06-r-with-cpp/index.html#example-for-loop-vector-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: for loop (vector input, scalar output)",
    "text": "Example: for loop (vector input, scalar output)\n\ndouble sumC(NumericVector x) {\n  int n = x.size();\n  double total = 0;\n  for (int i = 0; i &lt; n; ++i) {\n    total += x[i];\n  }\n  return total;\n}\n\n\nUse .size() method to find the length of a vector"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-while-loop-vector-input-scalar-output",
    "href": "slides/06-r-with-cpp/index.html#example-while-loop-vector-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: while loop (vector input, scalar output)",
    "text": "Example: while loop (vector input, scalar output)\n\ndouble sumC(NumericVector x) {\n  int n = x.size();\n  double total = 0;\n  int i = 0;\n  while (i &lt; n) {\n    total += x[i];\n    ++i;\n  }\n  return total;\n}\n\n\nUse break to break from a while or for loop\nUse continue to skip to the next iteration (vs next in R)"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-vector-output",
    "href": "slides/06-r-with-cpp/index.html#example-vector-output",
    "title": "C++ and Rcpp",
    "section": "Example: vector output",
    "text": "Example: vector output\nThe following computes the Euclidean distances\n\\[d_i  = \\sqrt{(x - y_i)^2}\\]\n\nNumericVector distC(double x, NumericVector y) {\n  int n = y.size();\n  NumericVector dist(n);\n  for(int i = 0; i &lt; n; ++i) {\n    dist[i] = sqrt(pow(ys[i] - x, 2.0));\n  }\n  return out;\n}\n\n\ndist(n) is used to create a numeric vector named dist of length n.\nv(n) would create a vector named v."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#c-functions",
    "href": "slides/06-r-with-cpp/index.html#c-functions",
    "title": "C++ and Rcpp",
    "section": "C++ Functions",
    "text": "C++ Functions\npow is a standard C++ function for computing a value raised to a power.\nBoth pow and sqrt are functions from the &lt;cmath&gt; library, see e.g. w3schools C++ math.\nTo use &lt;cmath&gt; functions in C++ code, we would normally need to include the &lt;cmath&gt; header in our .cpp file. However, Rcpp defines its own version of these functions, so we can use them with just the Rcpp header."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#creating-a-c-file-in-rstudio",
    "href": "slides/06-r-with-cpp/index.html#creating-a-c-file-in-rstudio",
    "title": "C++ and Rcpp",
    "section": "Creating a C++ file in RStudio",
    "text": "Creating a C++ file in RStudio\nFrom the menu bar:\n\nGo to File &gt; New File &gt; C++ file\nThis template already incleas the headers required for Rcpp\nDelete the extra content, apart from the comment //[Rcpp::export]\n\nYou can also create a C++ file from the new file drop-down in the Files pane, but this will be blank."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#your-turn",
    "href": "slides/06-r-with-cpp/index.html#your-turn",
    "title": "C++ and Rcpp",
    "section": "Your turn",
    "text": "Your turn\n\nCreate a new C++ file (recommend using the RStudio template)\nConvert the following R function that computes a weighted mean to C++\n\n\nwmean_r &lt;- function(x, w){\n  n &lt;- length(x)\n  total &lt;- total_w &lt;- 0\n  for (i in 1:n){\n    total &lt;- total + x[i] * w[i]\n    total_w &lt;- total_w + w[i]\n  }  \n  total/total_w\n}\n\n\nUse sourceCpp() to source in your function.\nUse bench::mark() to compare wmean_r(), wmean_cpp() and the stats function weighted.mean()."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#missing-values-in-c-data-types",
    "href": "slides/06-r-with-cpp/index.html#missing-values-in-c-data-types",
    "title": "C++ and Rcpp",
    "section": "Missing values in C++ data types",
    "text": "Missing values in C++ data types\nC++ data types do not handle NAs in input well\n\nint: use a length 1 IntegerVector instead\ndouble: NAs okay (converted to NAN)\nchar: use String instead\nbool: NAs converted to true; use int instead"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#missing-values-in-rcpp-vectors",
    "href": "slides/06-r-with-cpp/index.html#missing-values-in-rcpp-vectors",
    "title": "C++ and Rcpp",
    "section": "Missing values in Rcpp vectors",
    "text": "Missing values in Rcpp vectors\nRcpp vectors handle NAs in the corresponding type\n\n\n\nRcpp (vector)\nNA\n\n\n\n\nNumericVector\nNA_REAL\n\n\nIntegerVector\nNA_INTEGER\n\n\nCharacterVector\nNA_STRING\n\n\nLogicalVector\nNA_LOGICAL"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#matrices",
    "href": "slides/06-r-with-cpp/index.html#matrices",
    "title": "C++ and Rcpp",
    "section": "Matrices",
    "text": "Matrices\nEach vector type has a corresponding matrix equivalent: NumericMatrix, IntegerMatrix, CharacterMatrix and LogicalMatrix.\nCreate a matrix called named m1\n\nNumericMatrix m1(10, 5);\n\n\nSubset with (), e.g. m1(3, 2) for the value in row 3, column 2.\nThe first element is m1(0, 0).\nUse .nrow and .ncol methods to get the number of rows and columns\nAssign matrix elements as follows\n\n\nm1(0, 0) = 1;"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-row-sums-matrix-input-vector-output",
    "href": "slides/06-r-with-cpp/index.html#example-row-sums-matrix-input-vector-output",
    "title": "C++ and Rcpp",
    "section": "Example: row sums (matrix input, vector output)",
    "text": "Example: row sums (matrix input, vector output)\n\nNumericVector rowSumsC(NumericMatrix x) {\n  int nrow = x.nrow(), ncol = x.ncol();\n  NumericVector out(nrow);\n  \n  for (int i = 0; i &lt; nrow; i++) {\n    double total = 0;\n    for (int j = 0; j &lt; ncol; j++) {\n      total += x(i, j);\n    }\n    out[i] = total;\n  }\n  return out;\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#statistical-distributions",
    "href": "slides/06-r-with-cpp/index.html#statistical-distributions",
    "title": "C++ and Rcpp",
    "section": "Statistical distributions",
    "text": "Statistical distributions\nAs in R, Rcpp provides d/p/q/r functions for the density, distribution function, quantile function and random generation. - Functions in the Rcpp:: namespace return a vector. - Functions in the R:: namespace (also provided by the Rcpp R package) return a scalar\nFor example we can sample a single value from a \\(N(0, 1)\\) distribution by extracting the first element from a vector\nrgamma(1, 3, 1 / (y * y + 4))[0];\nOr use the R::rgamma() function to sample a single value directly\nR::rgamma(3, 1 / (y * y + 4))"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#your-turn-part-1",
    "href": "slides/06-r-with-cpp/index.html#your-turn-part-1",
    "title": "C++ and Rcpp",
    "section": "Your turn (part 1)",
    "text": "Your turn (part 1)\nIn a new C++ file, convert the following Gibbs sampler to C++\n\ngibbs_r &lt;- function(N, thin) {\n  mat &lt;- matrix(nrow = N, ncol = 2)\n  x &lt;- y &lt;- 0\n\n  for (i in 1:N) {\n    for (j in 1:thin) {\n      x &lt;- rgamma(1, 3, y * y + 4)\n      y &lt;- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))\n    }\n    mat[i, ] &lt;- c(x, y)\n  }\n  mat\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#your-turn-part-2",
    "href": "slides/06-r-with-cpp/index.html#your-turn-part-2",
    "title": "C++ and Rcpp",
    "section": "Your turn (part 2)",
    "text": "Your turn (part 2)\nCreate a wrapper function to set the seed as follows:\n\nset_seed &lt;- function(expr){\n  set.seed(1)\n  eval(expr)\n}\n\nBenchmark your gibbs_r() and gibbs_c() functions with N = 100 and thin = 10, using your wrapper function to set the seed."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#rcpp-sugar-1",
    "href": "slides/06-r-with-cpp/index.html#rcpp-sugar-1",
    "title": "C++ and Rcpp",
    "section": "Rcpp sugar",
    "text": "Rcpp sugar\nRcpp provides some “syntactic sugar” to allow us to write C++ code that is more like R code.\nOne example is operating on rows or columns of matrices. So far we have seen how to update individual elements of a NumericMatrix. Rcpp lets us extract an update whole rows/columns, e.g.\n\nmat(i, _) = NumericVector::create(x,y);\n\nA whole column would be extracted with mat(_, j)."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#vectorized-functions",
    "href": "slides/06-r-with-cpp/index.html#vectorized-functions",
    "title": "C++ and Rcpp",
    "section": "Vectorized functions",
    "text": "Vectorized functions\nThe vectorized random generation functions are another example of Rcpp sugar.\nRcpp provide many more vectorized functions, for example:\n\narithmetic operators (+, -, *, \\)\nlogical operators (==, !, =&lt;)\narithmetic functions (sqrt, pow, …)\nstatistical summaries (mean, median, )\n\nIn addition, Rcpp provides many R-like functions, such as which_max or rowSums, see Unofficial API documentation for a full list."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#rcpp-sugar-vectorized-functions",
    "href": "slides/06-r-with-cpp/index.html#rcpp-sugar-vectorized-functions",
    "title": "C++ and Rcpp",
    "section": "Rcpp sugar: vectorized functions",
    "text": "Rcpp sugar: vectorized functions\nRecall our distance function from earlier:\n\nNumericVector distC(double x, NumericVector y) {\n  int n = y.size();\n  NumericVector out(n);\n  for(int i = 0; i &lt; n; ++i) {\n    out[i] = sqrt(pow(ys[i] - x, 2.0));\n  }\n  return out;\n}\n\nWith Rcpp vectorization, we can simplify this to:\n\nNumericVector dist_sugar(double x, NumericVector y) {\n  return sqrt(pow(x - y, 2));\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#example-row-maximums",
    "href": "slides/06-r-with-cpp/index.html#example-row-maximums",
    "title": "C++ and Rcpp",
    "section": "Example: row maximums",
    "text": "Example: row maximums\nThis example combines row-indexing and a vectorized function, max().\n\nNumericVector row_max(NumericMatrix mat) {\n  int nrow = mat.nrow();\n  NumericVector max(nrow);\n  for (int i = 0; i &lt; nrow; i++)\n    max[i] = max( m(i,_) );\n  return max;\n}"
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#your-turn-1",
    "href": "slides/06-r-with-cpp/index.html#your-turn-1",
    "title": "C++ and Rcpp",
    "section": "Your turn",
    "text": "Your turn\nThe following R function can be used to simulate the value of \\(\\pi\\):\n\npiR &lt;- function(N) {\n    x &lt;- runif(N)\n    y &lt;- runif(N)\n    d &lt;- sqrt(x^2 + y^2)\n    return(4 * sum(d &lt; 1.0) / N)\n}\n\nConvert this to C++, taking advantage of the vectorized Rcpp functions."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#references",
    "href": "slides/06-r-with-cpp/index.html#references",
    "title": "C++ and Rcpp",
    "section": "References",
    "text": "References\n\n\nSimilar scope to this module: Gillespie, C and Lovelace, R, Efficient R programming, Rcpp section, https://csgillespie.github.io/efficientR/performance.html#rcpp\nGoing a bit further: Wickham, H, Advanced R (2nd edn), Rewriting R code in C++ chapter, https://adv-r.hadley.nz/rcpp.html\nNot very polished, but broader coverage of Rcpp functionality: Tsuda, M.E., Rcpp for everyone, https://teuder.github.io/rcpp4everyone_en/300_Rmath.html\nThe Rcpp vignettes, accessed via browseVignettes(\"Rcpp\") or CRAN\nThe unofficial Rcpp API documentation\nCase studies (optimising by improving R code and/or using C++)\n\nhttps://robotwealth.com/optimising-the-rsims-package-for-fast-backtesting-in-r/\nhttps://gallery.rcpp.org/articles/bayesian-time-series-changepoint/\nThe Rcpp Gallery has all sorts of examples, many illustrating advanced features of Rcpp)."
  },
  {
    "objectID": "slides/06-r-with-cpp/index.html#license",
    "href": "slides/06-r-with-cpp/index.html#license",
    "title": "C++ and Rcpp",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-welcome/index.html#overview",
    "href": "slides/01-welcome/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/01-welcome/index.html#resources",
    "href": "slides/01-welcome/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/01-welcome/index.html#license",
    "href": "slides/01-welcome/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/00-template/index.html#overview",
    "href": "slides/00-template/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/00-template/index.html#references",
    "href": "slides/00-template/index.html#references",
    "title": "SESSION TITLE",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "slides/00-template/index.html#resources",
    "href": "slides/00-template/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/00-template/index.html#license",
    "href": "slides/00-template/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/10-check-package-documentation/index.html#overview",
    "href": "slides/10-check-package-documentation/index.html#overview",
    "title": "SESSION TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/10-check-package-documentation/index.html#resources",
    "href": "slides/10-check-package-documentation/index.html#resources",
    "title": "SESSION TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/10-check-package-documentation/index.html#license",
    "href": "slides/10-check-package-documentation/index.html#license",
    "title": "SESSION TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/05-profiling/index.html#overview",
    "href": "slides/05-profiling/index.html#overview",
    "title": "Profiling",
    "section": "Overview",
    "text": "Overview\n\nProfiling\nMAYBE BRING IN SOMETHING FROM THE BOTTLENECKS SESSION?"
  },
  {
    "objectID": "slides/05-profiling/index.html#profiling-code",
    "href": "slides/05-profiling/index.html#profiling-code",
    "title": "Profiling",
    "section": "Profiling code",
    "text": "Profiling code\nTo make our code more efficient, we first need to identify the bottlenecks, in terms of time and/or memory usage.\nProfiling stops the execution of code every few milliseconds and records\n\nThe call stack: the function currently being executed, the function that it was called from and so on up to the top-level function call.\nThe memory allocated and released since the last record.\n\nWe will use the profvis package to visualise profiling results."
  },
  {
    "objectID": "slides/05-profiling/index.html#example-nested-pause-functions",
    "href": "slides/05-profiling/index.html#example-nested-pause-functions",
    "title": "Profiling",
    "section": "Example: nested pause functions",
    "text": "Example: nested pause functions\nThe following code is saved in profiling-example.R and uses profvis::pause() to wait 0.1s inside each function\n\ntop_level &lt;- function() {\n  profvis::pause(0.1)\n  middle_level()\n  bottom_level()\n}\nmiddle_level &lt;- function() {\n  profvis::pause(0.1)\n  bottom_level()\n}\nbottom_level &lt;- function() {\n  profvis::pause(0.1)\n}\n\n\nSys.sleep() can not be used as it would not show in profiling output"
  },
  {
    "objectID": "slides/05-profiling/index.html#using-profvis",
    "href": "slides/05-profiling/index.html#using-profvis",
    "title": "Profiling",
    "section": "Using profvis",
    "text": "Using profvis\nSource the code to be profiled and pass the function call to be profiled to profvis()\n\nlibrary(profvis)\nsource(\"profiling-example.R\")\nprofvis(top_level())\n\nAn interactive HTML document will open with the results.\nIn RStudio this will open in the source pane; click “show in new window” button to open the document in a new window."
  },
  {
    "objectID": "slides/05-profiling/index.html#section",
    "href": "slides/05-profiling/index.html#section",
    "title": "Profiling",
    "section": "",
    "text": "Screenshot of the profvis HTML output. At the bottom, a stacked set of horizontal bars along a time axis, representing the length of time in each function. At a given time, the top-level function is at the bottom of the stack with each nested function stacked on top. The source code is shown at the top of the screenshot, with a horizontal bar for each line, showing the time spent. Interpretation on next slide"
  },
  {
    "objectID": "slides/05-profiling/index.html#interpretation",
    "href": "slides/05-profiling/index.html#interpretation",
    "title": "Profiling",
    "section": "Interpretation",
    "text": "Interpretation\nIn the flame graph the yellow bars correspond to lines in the source file shown above the graph. The plot is interactive.\nIn the overall time of 250ms we see:\n\n4 equal-sized blocks for each pause of 0.1s\nNearly all time is spent in the top-level function\nNearly half the time is spent in the mid-level function\nNearly half the time is also spent in the bottom-level function\nThe cmp function is called as R tries to compile new functions so that it can call the compiled version in subsequent calls.\n\nNo objects are created or deleted: no memory changes."
  },
  {
    "objectID": "slides/05-profiling/index.html#data-tab",
    "href": "slides/05-profiling/index.html#data-tab",
    "title": "Profiling",
    "section": "Data tab",
    "text": "Data tab\nThe Data tab shows a table with the memory and time usage for each function call. The nested calls can be expanded/collapsed to show/hide the corresponding lines.\n\nScreenshot of the data tab in the profvis HTML output. A table with columns “Code” (function name), “File” (name of source file containing function), “Memory (MB)” and “Time (ms)”."
  },
  {
    "objectID": "slides/05-profiling/index.html#memory-profiling",
    "href": "slides/05-profiling/index.html#memory-profiling",
    "title": "Profiling",
    "section": "Memory profiling",
    "text": "Memory profiling\nTo illustrate memory profiling we can consider a loop that concatenates values.\nAs it is a small code snippet, we can pass to profvis() directly\n\nprofvis({\n  x &lt;- integer()\n  for (i in 1:10000) {\n    x &lt;- c(x, i)\n  }\n})"
  },
  {
    "objectID": "slides/05-profiling/index.html#section-1",
    "href": "slides/05-profiling/index.html#section-1",
    "title": "Profiling",
    "section": "",
    "text": "Flame graph for profiling the contenation example. Interpretation on next slide."
  },
  {
    "objectID": "slides/05-profiling/index.html#gc",
    "href": "slides/05-profiling/index.html#gc",
    "title": "Profiling",
    "section": "<GC>",
    "text": "&lt;GC&gt;\nAs expected, the majority of the time is spent within c(), but we also see a lot time spent in &lt;GC&gt;, the garbage collector.\nIn the memory column next to the corresponding line in the source code, we see a bar to left labelled -123.0 and a bar to the right labelled 137.2. This means that 137 MB of memory was allocated and 123 MB of memory was released.\nEach call to c() causes a new copy of x to be created.\nMemory profiling can help to identify short-lived objects that might be avoided by changes to the code."
  },
  {
    "objectID": "slides/05-profiling/index.html#monopoly",
    "href": "slides/05-profiling/index.html#monopoly",
    "title": "Profiling",
    "section": "Monopoly",
    "text": "Monopoly\n\n\nIn the game of Monopoly, players roll two die to move round the board. Players buy assets on which they can charge rent or taxes and aim to make the most money.\nThe squares on the board represent\n\n\n\n\n\nProperties, train stations or utility companies to buy\nEvents that trigger an action, e.g. paying a tax or going to jail\n\nThe efficient package contains the simulate_monopoly() function to simulate game play; we’ll use this to practice profiling."
  },
  {
    "objectID": "slides/05-profiling/index.html#your-turn",
    "href": "slides/05-profiling/index.html#your-turn",
    "title": "Profiling",
    "section": "Your turn!",
    "text": "Your turn!\n\nInstall the efficient package with the following code to keep the code source files:\n\n\nremotes::install_github(\"csgillespie/efficient\",\n                         INSTALL_opts = \"--with-keep.source\")\n\n\nUse profvis() to profile simulate_monopoly(10000). Explore the output. Which parts of the code are slow?\nMost of the time is spent in the function move_square(). Use View(move_square) to view the source code. Copy the code to a new .R file and rename the function move_square2. Edit move_square2() to speed up the slow parts of the code. (Go to next slide for testing the updates)"
  },
  {
    "objectID": "slides/05-profiling/index.html#your-turn-continued",
    "href": "slides/05-profiling/index.html#your-turn-continued",
    "title": "Profiling",
    "section": "Your turn! (continued)",
    "text": "Your turn! (continued)\nCreate a wrapper to run a specified move square function n times with different seeds:\n\nrun &lt;- function(n, fun){\n  x &lt;- numeric(n)\n  for (i in seq_len(n)) {\n    set.seed(i)\n    x[i] &lt;- fun(1)\n  }\n  x\n}\n\nRun bench::mark(run(n, move_square), run(n, move_square2)) with n = 1000 to test your changes.\nFinally, compare profvis(run(n, move_square)) with profvis(run(n, move_square2))."
  },
  {
    "objectID": "slides/05-profiling/index.html#general-principles",
    "href": "slides/05-profiling/index.html#general-principles",
    "title": "Profiling",
    "section": "General principles",
    "text": "General principles\n\nAvoid optimizing too soon\n\nGet the code right first\n\nAvoid over-optimization\n\nFocus on the bottlenecks\nKeep an eye on the units - will real gains be made?\nThink about maintainability: readability, simplicity, dependencies\n\nAvoid anonymous functions\n\nName utility functions to see them in the profile\n\nUse benchmarking to assess alternative implementations"
  },
  {
    "objectID": "slides/05-profiling/index.html#c-and-rcpp",
    "href": "slides/05-profiling/index.html#c-and-rcpp",
    "title": "Profiling",
    "section": "C++ and Rcpp",
    "text": "C++ and Rcpp\nIn the next session, we’ll cover using C++ via Rcpp to rewrite R code that has been identified through profiling as causing bottlenecks in your code."
  },
  {
    "objectID": "slides/05-profiling/index.html#references",
    "href": "slides/05-profiling/index.html#references",
    "title": "Profiling",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "slides/05-profiling/index.html#license",
    "href": "slides/05-profiling/index.html#license",
    "title": "Profiling",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#overview",
    "href": "slides/07-package-foundations/index.html#overview",
    "title": "Package Foundations",
    "section": "Overview",
    "text": "Overview\n\nWhy write a package?\nPackage structure and state\nPackage development setup\nCreating a package with a working function"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#why-write-a-package-1",
    "href": "slides/07-package-foundations/index.html#why-write-a-package-1",
    "title": "Package Foundations",
    "section": "Why write a package?",
    "text": "Why write a package?\n\nYou want to generalise code\nYou want to document code\nYou want to test code\nYou want to share code\nYou want to create impact from your work"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#script-vs-package",
    "href": "slides/07-package-foundations/index.html#script-vs-package",
    "title": "Package Foundations",
    "section": "Script vs package",
    "text": "Script vs package\n\n\n\n\n\n\n\nR script\nPackage\n\n\n\n\nOne-off data analysis\nProvides reusable components\n\n\nDefined by .R extension\nDefined by presence of DESCRIPTION file\n\n\nlibrary() calls\nImports defined in NAMESPACE file\n\n\nDocumentation in # comments\nDocumentation in files and Roxygen comments\n\n\nRun lines or source file\nInstall and restart\n\n\n\n\nreusable components: typically functions, but could also be R markdown template, Shiny app, data"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-structure",
    "href": "slides/07-package-foundations/index.html#package-structure",
    "title": "Package Foundations",
    "section": "Package structure",
    "text": "Package structure\nAn R package is developed as a directory of source code files.\nThe names of files and directories must follow the specification laid out in the Writing R Extensions manual - we’ll cover the main components in this workshop.\nDirectory tree for an example RStudio package project:\n\n\nmypackage\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n└── mypackage.Rproj"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-states",
    "href": "slides/07-package-foundations/index.html#package-states",
    "title": "Package Foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\n\n\n\n\nsource\n\n\n\n\n\n\n\nbundled\nbinary\ninstalled\nin-memory\n\n\n\n\n\nsource\n\n\nWhat you create and work on.\nSpecific directory structure with some particular components e.g., DESCRIPTION, an /R directory."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-states-1",
    "href": "slides/07-package-foundations/index.html#package-states-1",
    "title": "Package Foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\n\n\n\n\nbundled\n\n\n\n\n\n\n\nbinary\ninstalled\nin-memory\n\n\n\n\n\nbundled\n\n\nPackage files compressed to single .tar.gz file.\nAlso known as “source tarballs”.\nCreated by command line tool R CMD build\nUnpacked it looks very like the source package.\n\n\n\n\n\n\nIn the rare case that you need to make a bundle from a package you’re developing locally, use devtools::build(). Under the hood, this calls pkgbuild::build() and, ultimately, R CMD build, which is described further in the Building package tarballs section of Writing R Extensions."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-states-2",
    "href": "slides/07-package-foundations/index.html#package-states-2",
    "title": "Package Foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\n\n\n\n\nbinary\n\n\n\n\n\n\n\ninstalled\nin-memory\n\n\n\n\n\nbinary\n\n\nCompressed copy of the package in installed form.\nAlso a single file.\nPlatform specific: .tgz (Mac) .zip (Windows).\nPackage developers submit a bundle to CRAN; CRAN makes and distributes binaries.\n\n\n\n\n\n\nA package in binary form is Platform specific. If you write a package for distribution on CRAN, you submit a bundle to CRAN then CRAN makes and distributes binaries\ninstall.packages() is usually downloading the binary\nTo understand the difference between package bundle and a package binary see https://r-pkgs.org/package-structure-state.html"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-states-3",
    "href": "slides/07-package-foundations/index.html#package-states-3",
    "title": "Package Foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\nbinary\n\n\n\n\ninstalled\n\n\n\n\n\n\n\nin-memory\n\n\n\n\n\ninstalled\n\n\nA directory of files in a library directory.\nAny C/C++/Fortran code is in compiled form.\nHelp files, code and optionally data are in database form.\ninstall.packages() can install from source or from a binary"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-states-4",
    "href": "slides/07-package-foundations/index.html#package-states-4",
    "title": "Package Foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\nbinary\ninstalled\n\n\n\n\nin-memory\n\n\n\n\n\n\n\n\n\n\n\n\nin-memory\n\n\nIf a package is installed, library() makes its function available by loading the package into memory and attaching it to the search path."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#buildinginstalling-packages-from-source",
    "href": "slides/07-package-foundations/index.html#buildinginstalling-packages-from-source",
    "title": "Package Foundations",
    "section": "Building/Installing Packages from Source",
    "text": "Building/Installing Packages from Source\nThere are various reasons we may wish to build or install from source:\n\nInstalling a CRAN package where a binary has not yet been built for the latest version.\nInstalling a package from GitHub/other version-controlled source code repository, e.g.\n\n\nremotes::install_github(\"r-lib/revdepcheck\")\n\n\nInstalling our own package from the source code or building it to submit to CRAN.\n\nIf the package includes C/C++/Fortran code, we will need a suitable compiler."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#linux",
    "href": "slides/07-package-foundations/index.html#linux",
    "title": "Package Foundations",
    "section": "Linux",
    "text": "Linux\nDebian/Ubuntu:\napt-get update\napt-get install r-base-dev\nFedora/RedHat: should be set up already."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#macos",
    "href": "slides/07-package-foundations/index.html#macos",
    "title": "Package Foundations",
    "section": "MacOS",
    "text": "MacOS\nOption 1\n\nRegister as an Apple developer (for free)\n\nThen, in the terminal:\nxcode-select --install\n\n\nOption 2\n\nInstall the current release of full Xcode from the Mac App Store\nWithin XCode go to Preferences -&gt; Downloads and install the Command Line Tools\nMore convenient but installs a lot you don’t need"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#windows",
    "href": "slides/07-package-foundations/index.html#windows",
    "title": "Package Foundations",
    "section": "Windows",
    "text": "Windows\n\nDownload the Rtools installer that matches your version of R from https://cran.r-project.org/bin/windows/Rtools/\nRun the installer, Rtools.exe, keeping the default settings."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#the-setup-well-be-using",
    "href": "slides/07-package-foundations/index.html#the-setup-well-be-using",
    "title": "Package Foundations",
    "section": "The setup we’ll be using",
    "text": "The setup we’ll be using\nWe’ll be using the following tools for package development:\n\nRStudio: to manage and edit the package source code\ngit + GitHub: to version control the package source code\ndevtools and usethis R packages:\n\ndevtools for functions supporting the development workflow\nusethis for setup tasks\ndevtools depends on usethis package\nIntegrated with RStudio: projects, menu items/shortcuts\nUses system utilities internally: R CMD utilities bundled with R"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#follow-along",
    "href": "slides/07-package-foundations/index.html#follow-along",
    "title": "Package Foundations",
    "section": "Follow along",
    "text": "Follow along\nFor the rest of this session, follow along on your own computer to make sure you’re set up for package development and to create our example package."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#devtools-and-usethis",
    "href": "slides/07-package-foundations/index.html#devtools-and-usethis",
    "title": "Package Foundations",
    "section": "devtools and usethis",
    "text": "devtools and usethis\nWe can use devtools right away to check our system is setup for package development.\n\ninstall.packages(\"devtools\")\n\n\nlibrary(devtools)\n\n\nhas_devel()\n\nYour system is ready to build packages!\n\n\nInstalling devtools will also install usethis.\nCheck you have the latest version of usethis – 2.2.0 was recently released – and update if not:\n\npackageVersion(\"usethis\")\n\n[1] '2.2.0'"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#create-a-github-pat",
    "href": "slides/07-package-foundations/index.html#create-a-github-pat",
    "title": "Package Foundations",
    "section": "Create a GitHub PAT",
    "text": "Create a GitHub PAT\nThe usethis package uses personal access tokens (PAT) to communicate with GitHub.\nFirst, make sure you’re signed into GitHub. Then run\n\nusethis::create_github_token()\n\n\nAdd Note describing the computer or use- case (e.g. personal-macbook-pro-2021, project-xyz)\nSelect expiration (recommend default 30 days)\nCheck scope (default selection is fine)\nClick ‘Generate Token’\nImportant! Copy token to clipboard, do not close window until stored (see next slide)!\nYou may want to store token in a secure vault, like 1Password or BitWarden"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#store-your-pat",
    "href": "slides/07-package-foundations/index.html#store-your-pat",
    "title": "Package Foundations",
    "section": "Store your PAT",
    "text": "Store your PAT\nBy installing usethis, you will also have the gitcreds package to manage git credentials.\nPut your PAT into the Git credential store by running the following command and entering your copied PAT at the prompt (assume the PAT is on your clipboard).\n\ngitcreds::gitcreds_set()\n\n\nIf you don’t have a PAT stored, will prompt you to enter: paste!\nIf you do, you will be given a choice to keep/replace/see the password\n\nchoose as appropriate\nif replacing, paste!"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#sitrep-and-vaccinate",
    "href": "slides/07-package-foundations/index.html#sitrep-and-vaccinate",
    "title": "Package Foundations",
    "section": "sitrep and vaccinate",
    "text": "sitrep and vaccinate\nAsk for a situation report:\n\nusethis::git_sitrep()\n\nCheck that the PAT is discovered.\nCheck that your user name and email are defined, else follow the configuration instructions from a previous Advanced R workshop.\nIt’s also a good idea to vaccinate. This implements best practice by adding files to your global .gitignore:\n\nusethis::git_vaccinate()"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#more-on-usethis-and-github-creds",
    "href": "slides/07-package-foundations/index.html#more-on-usethis-and-github-creds",
    "title": "Package Foundations",
    "section": "More on usethis and GitHub creds",
    "text": "More on usethis and GitHub creds\nIt is well worth reading (and following all the instructions) in the following two usethis vignettes:\n\nusethis setup\nManaging Git(Hub) Credentials\n\nSee in particular the section on ongoing PAT maintenance"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#package-name",
    "href": "slides/07-package-foundations/index.html#package-name",
    "title": "Package Foundations",
    "section": "Package name",
    "text": "Package name\nCan only contain the characters [A-Z, a-z, 0-9, .]. Some tips:\n\nUnique name you can easily Google\nAvoid mixing upper and lower case\nUse abbreviations\nAdd an r to make unique, e.g stringr\nUse wordplay, e.g. lubridate\nAvoid trademarked names\nUse the available package to check name not taken\n\nFor now, we will use mypackage"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#create-a-package-1",
    "href": "slides/07-package-foundations/index.html#create-a-package-1",
    "title": "Package Foundations",
    "section": "Create a package!",
    "text": "Create a package!\n\nusethis::create_package(\"~/Desktop/mypackage\")\n\n\nBe deliberate about where you create your package.\nDo not nest inside another RStudio project, R package or git repo.\nYou may want to use a different path!"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#create_package",
    "href": "slides/07-package-foundations/index.html#create_package",
    "title": "Package Foundations",
    "section": "create_package()",
    "text": "create_package()\nWhat happens when we run create_package()?\n\nR will create a folder called mypackage which is a package and an RStudio project\nrestart R in the new project\ncreate the some infrastructure for your package with the minimal components for a working package\nstart the RStudio Build pane"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#r-studio-build-panemenu",
    "href": "slides/07-package-foundations/index.html#r-studio-build-panemenu",
    "title": "Package Foundations",
    "section": "R Studio Build pane/menu",
    "text": "R Studio Build pane/menu"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#minimal-components",
    "href": "slides/07-package-foundations/index.html#minimal-components",
    "title": "Package Foundations",
    "section": "Minimal components",
    "text": "Minimal components\nusethis will create the minimal components of a package that we have already seen:\n\nDESCRIPTION provides metadata about your package.\nNAMESPACE declares the functions your package exports for external use and the external functions your package imports from other packages.\nThe /R directory is where we will put .R files with function definitions."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#auxiliary-files",
    "href": "slides/07-package-foundations/index.html#auxiliary-files",
    "title": "Package Foundations",
    "section": "Auxiliary files",
    "text": "Auxiliary files\nusethis also adds some auxiliary files:\n\nmypackage.Rproj is the file that makes this directory an RStudio Project.\n.Rbuildignore lists files that we need but that should not be included when building the R package from source.\n.gitignore anticipates Git usage and ignores some standard, behind-the-scenes files created by R and RStudio."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#use-git",
    "href": "slides/07-package-foundations/index.html#use-git",
    "title": "Package Foundations",
    "section": "Use git",
    "text": "Use git\nTo make our project agGit repository, or ‘repo’, on our local machine we use usethis::use_git()\nMake your package a git repo:\n\nusethis::use_git()"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#use_git-output-part-1",
    "href": "slides/07-package-foundations/index.html#use_git-output-part-1",
    "title": "Package Foundations",
    "section": "use_git() output (part 1)",
    "text": "use_git() output (part 1)\n\n ✔ Initialising Git repo\n ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to  '.gitignore' \n There are 5 uncommitted files:\n * '.gitignore'\n * '.Rbuildignore'\n * 'DESCRIPTION'\n * 'mypackage.Rproj'\n * 'NAMESPACE'\n Is it ok to commit them?\n\n 1: I agree\n 2: Absolutely not\n 3: No way\n\nChoose the affirmative option! (The exact options may vary.)"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#use_git-output-part-2",
    "href": "slides/07-package-foundations/index.html#use_git-output-part-2",
    "title": "Package Foundations",
    "section": "use_git() output (part 2)",
    "text": "use_git() output (part 2)\n\n√ Adding files\n√ Commit with message 'Initial commit'\n• A restart of RStudio is required to activate the Git pane\nRestart now?\n\n1: Nope\n2: Definitely\n3: No\n\nChoose the affirmative option! (The exact options may vary.)\n\nYou should find the git pane has opened."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#use-github",
    "href": "slides/07-package-foundations/index.html#use-github",
    "title": "Package Foundations",
    "section": "Use GitHub",
    "text": "Use GitHub\nTo create a copy on GitHub we use usethis::use_github().\n\n# Choose one of the following:\nusethis::use_github() # creates a public repo\nusethis::use_github(private = TRUE)\n\nThis takes a local project, creates an associated repo on GitHub, adds it to your local repo as the “origin remote”, and makes an initial “push” to synchronize.\n\n\n\n\n\nWarwick GitHub\n\n\nUniversity of Warwick members can use the University’s private GitHub instance, e.g.\n\nusethis::use_github(\"https://github.warwick.ac.uk\")\n\nHowever, Warwick GitHub does not support GitHub Actions or GitHub Pages, so for packages using your personal account is better – we’ll be using both Actions and Pages later."
  },
  {
    "objectID": "slides/07-package-foundations/index.html#references",
    "href": "slides/07-package-foundations/index.html#references",
    "title": "Package Foundations",
    "section": "References",
    "text": "References\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/07-package-foundations/index.html#license",
    "href": "slides/07-package-foundations/index.html#license",
    "title": "Package Foundations",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/02-functions/index.html#overview",
    "href": "slides/02-functions/index.html#overview",
    "title": "Functions",
    "section": "Overview",
    "text": "Overview\n\nFunctions basics\nBeyond the basics\nError handling"
  },
  {
    "objectID": "slides/02-functions/index.html#components-of-a-function",
    "href": "slides/02-functions/index.html#components-of-a-function",
    "title": "Functions",
    "section": "Components of a function",
    "text": "Components of a function\nFunctions are defined by three components:\n\nthe name of the function\nthe arguments of the function, inside ( )\nthe body of the function that computes the result, inside { }\n\nThey are created using function()\n\nt_statistic &lt;- function(n) {\n    x &lt;- rnorm(n)\n    y &lt;- rnorm(n)\n    t.test(x, y)$statistic\n}"
  },
  {
    "objectID": "slides/02-functions/index.html#naming-functions",
    "href": "slides/02-functions/index.html#naming-functions",
    "title": "Functions",
    "section": "Naming functions",
    "text": "Naming functions\nAs with arguments, function names are important:\n\nuse a name that describes what it returns (e.g. t_statistic) or what it does (e.g. remove_na)\ntry to use one convention for combining words (e.g. snake case t_statistic or camel case tStatistic)\navoid using the same name as other functions"
  },
  {
    "objectID": "slides/02-functions/index.html#specified-arguments",
    "href": "slides/02-functions/index.html#specified-arguments",
    "title": "Functions",
    "section": "Specified arguments",
    "text": "Specified arguments\nspecified arguments are those named in the function definition, e.g.  in rnorm()\n\nargs(rnorm)\n\nfunction (n, mean = 0, sd = 1) \nNULL\n\n\nthe arguments are n, mean and sd.\nmean and sd have been given default values in the function definition, but n has not, so the function fails if the user does not pass a value to n\n\nrnorm()\n\nError in rnorm(): argument \"n\" is missing, with no default"
  },
  {
    "objectID": "slides/02-functions/index.html#name-and-order-of-arguments",
    "href": "slides/02-functions/index.html#name-and-order-of-arguments",
    "title": "Functions",
    "section": "Name and order of arguments",
    "text": "Name and order of arguments\nThe user can pass objects to these arguments using their names or by supplying unnamed values in the right order\n\nrnorm(5, 1, 10)\n\n[1] -9.0235560 10.1127715 11.7354364 16.3617247  0.6612166\n\nrnorm(5, sd = 10)\n\n[1] -15.113257 -10.603837 -10.987158   6.461319   3.524185\n\n\nSo naming and order is important! Some guidelines\n\nput compulsory arguments first, e.g. data\nput rarely used arguments last, e.g. tolerance setting\nuse short but meaningful argument names\nif relevant, use the same argument names as similar functions"
  },
  {
    "objectID": "slides/02-functions/index.html#using-arguments",
    "href": "slides/02-functions/index.html#using-arguments",
    "title": "Functions",
    "section": "Using arguments",
    "text": "Using arguments\nArguments are used as objects in the function code.\nA new environment is created each time the function is called, separate from the global workspace.\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x, y){\n    a &lt;- 1\n    x &lt;- x + a\n    x + y\n}\nf(x, y)\n\n[1] 5\n\nx\n\n[1] 1\n\na\n\nError in eval(expr, envir, enclos): object 'a' not found"
  },
  {
    "objectID": "slides/02-functions/index.html#return-values-single",
    "href": "slides/02-functions/index.html#return-values-single",
    "title": "Functions",
    "section": "Return values (single)",
    "text": "Return values (single)\nBy default, functions return the object created by the last line of code\n\nf &lt;- function(x) {\n    x &lt;- x + 1\n    log(x)\n}\n\nAlternatively return() can be used to terminate the function and return a given object\n\nf &lt;- function(x) {\n    if (all(x &gt; 0)) return(log(x))\n    x[x &lt;= 0] &lt;- 0.1\n    log(x)\n}"
  },
  {
    "objectID": "slides/02-functions/index.html#return-values-multiple",
    "href": "slides/02-functions/index.html#return-values-multiple",
    "title": "Functions",
    "section": "Return values (multiple)",
    "text": "Return values (multiple)\nMultiple objects can be returned in a list:\n\nmean_and_sd &lt;- function(x) {\n  res_mean &lt;- mean(x, na.rm = TRUE)\n  res_sd &lt;- sd(x)\n  \n  list(mean = res_mean,\n       sd = res_sd)\n}\n\nx &lt;- 1:3\nmean_and_sd(x)\n\n$mean\n[1] 2\n\n$sd\n[1] 1"
  },
  {
    "objectID": "slides/02-functions/index.html#rstudio-helper",
    "href": "slides/02-functions/index.html#rstudio-helper",
    "title": "Functions",
    "section": "RStudio helper",
    "text": "RStudio helper\nRStudio has a helper to turn code into a function:\n\nSelect the lines of code that will become the body of the function.\nSelect “Code” &gt; “Extract Function” from the menu.\nEnter the name of the new function in the dialog box.\nEdit the arguments if required.\nAdd/edit the last line to specify the return value."
  },
  {
    "objectID": "slides/02-functions/index.html#exercise-files",
    "href": "slides/02-functions/index.html#exercise-files",
    "title": "Functions",
    "section": "Exercise files",
    "text": "Exercise files\nhttps://github.com/Warwick-Stats-Resources/Advanced-R-exercises\n\nYou can get the files by creating a new project from version control in RStudio (if set up)\nBy going to the ‘Code’ button in the repo, then ‘Download ZIP’, then opening Advanced-R-exercises.Rproj."
  },
  {
    "objectID": "slides/02-functions/index.html#exercise-1",
    "href": "slides/02-functions/index.html#exercise-1",
    "title": "Functions",
    "section": "Exercise 1",
    "text": "Exercise 1\nIn the qq_norm chunk of exercises.Rmd there is some code to compute the slope and intercept of the line to add to a quantile-quantile plot, comparing sample quantiles against theoretical quantiles of a N(0, 1) distribution.\nTurn this code into a function named qq_norm taking the sample data as an argument and returning the slope and intercept in a list.\nRun this chunk to source the function, then run the normal-QQ chunk which uses the qq_norm function to compute parameters for an example plot."
  },
  {
    "objectID": "slides/02-functions/index.html#function-environment",
    "href": "slides/02-functions/index.html#function-environment",
    "title": "Functions",
    "section": "Function environment",
    "text": "Function environment\nA new environment is created each time the function is called, separate from the global workspace.\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x, y){\n    a &lt;- 1\n    x &lt;- x + a\n    x + y\n}\nf(x, y)\n\n[1] 5\n\nx\n\n[1] 1\n\na\n\nError in eval(expr, envir, enclos): object 'a' not found"
  },
  {
    "objectID": "slides/02-functions/index.html#lexical-scoping",
    "href": "slides/02-functions/index.html#lexical-scoping",
    "title": "Functions",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nIf an object is not defined within the function, or passed in as an argument, R looks for it in the parent environment where the function was defined\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x){\n    x + y\n}\nf(x)\n\n[1] 4\n\nrm(y)\nf(x)\n\nError in f(x): object 'y' not found\n\n\nIt is safest (and best practice) to use arguments rather than depend on global variables!"
  },
  {
    "objectID": "slides/02-functions/index.html#unspecified-arguments",
    "href": "slides/02-functions/index.html#unspecified-arguments",
    "title": "Functions",
    "section": "Unspecified arguments",
    "text": "Unspecified arguments\n... or the ellipsis allow unspecified arguments to be passed to the function.\nThis device is used by functions that work with arbitrary numbers of objects, e.g. \n\nargs(sum)\n\nfunction (..., na.rm = FALSE) \nNULL\n\nsum(1, 4, 10, 2)\n\n[1] 17\n\n\nIt can also be used to pass on arguments to another function, e.g.\n\nt_statistic &lt;- function(x, g, ...) {\n    t.test(x ~ g, ...)$stat\n}"
  },
  {
    "objectID": "slides/02-functions/index.html#using-...",
    "href": "slides/02-functions/index.html#using-...",
    "title": "Functions",
    "section": "Using ...",
    "text": "Using ...\nArguments passed to ... can be collected into a list for further analysis\n\nmeans &lt;- function(...){\n    dots &lt;- list(...)\n    vapply(dots, mean, numeric(1), na.rm = TRUE)\n}\nx &lt;- 1\ny &lt;- 2:3\nmeans(x, y)\n\n[1] 1.0 2.5\n\n\nSimilarly the objects could be concatenated using c()"
  },
  {
    "objectID": "slides/02-functions/index.html#side-effects",
    "href": "slides/02-functions/index.html#side-effects",
    "title": "Functions",
    "section": "Side effects",
    "text": "Side effects\nA side-effect is a change outside the function that occurs when the function is run, e.g.\n\nplot to the graphics window or other device\nprinting output to the console\nwrite data to a file\n\nA function can have many side-effects and a return value, but it is best practice to have a separate function for each task, e.g creating a plot or a table.\nWriting to file is usually best done outside a function."
  },
  {
    "objectID": "slides/02-functions/index.html#excercise-2",
    "href": "slides/02-functions/index.html#excercise-2",
    "title": "Functions",
    "section": "Excercise 2",
    "text": "Excercise 2\nCopy your qq_norm function to the qq chunk and rename it qq.\nAdd a new argument qfun to specify any quantile function (e.g. qt, qf, etc). Give it the default value qnorm.\nIn the body of qq, use qfun instead of qnorm to compute q_theory. Use ... to pass on arguments to qfun.\nRun the qq chunk and test your function on the t-QQ chunk."
  },
  {
    "objectID": "slides/02-functions/index.html#using-functions-from-other-packages",
    "href": "slides/02-functions/index.html#using-functions-from-other-packages",
    "title": "Functions",
    "section": "Using functions from other packages",
    "text": "Using functions from other packages\nIn our own functions (outside of packages), it is possible to use library\n\nscale_rows &lt;- function(X){\n    library(matrixStats)\n    X &lt;- X - rowMeans(X)\n    X/rowSds(X)\n}\n\nBut this loads the entire package, potentially leading to clashes with functions from other packages. It is better to use the import package:\n\nscale_rows &lt;- function(X){\n    import::from(matrixStats, rowSds)\n    X &lt;- X - rowMeans(X)\n    X/rowSds(X)\n}\nscale_rows(matrix(1:12, nrow = 3))\n\n\nThen in our script we don’t need to use library(matrixStats) for rowSds to work (it must be installed though)!"
  },
  {
    "objectID": "slides/02-functions/index.html#custom-ggplot",
    "href": "slides/02-functions/index.html#custom-ggplot",
    "title": "Functions",
    "section": "Custom ggplot",
    "text": "Custom ggplot\nggplot2, like dplyr and other tidyverse packages, uses non-standard evaluation, that is, it refers to variable names in a data frame as if they were objects in the current environment\n\nggplot(mtcars, aes(x = mpg, y= disp)) +\n    geom_point()\n\nTo emulate this, we have to need to embrace arguments\n\nggscatter &lt;- function(data, x, y){\n    import::from(ggplot2, ggplot, aes, geom_point)\n    ggplot(data, aes(x = {{ x }}, y = {{ y }})) +\n        geom_point()\n}\nggscatter(mtcars, x = mpg, y = disp)"
  },
  {
    "objectID": "slides/02-functions/index.html#externalizing-function-code",
    "href": "slides/02-functions/index.html#externalizing-function-code",
    "title": "Functions",
    "section": "Externalizing function code",
    "text": "Externalizing function code\nIt is a good idea to separate function code from analysis code.\nPut related functions together and source as required\n\nsource(\"modelFunctions.R\")\nsource(\"plotFunctions.R\")\n\nThe import package enables only necessary, top-level functions to be imported to the global workspace:\n\nimport::here(poissonModel, quasiPoissonModel, .from = \"modelFunctions.R\")\n\nIn either case, import::from commands can be put outside the function body to make the code easier to read."
  },
  {
    "objectID": "slides/02-functions/index.html#sanity-checks",
    "href": "slides/02-functions/index.html#sanity-checks",
    "title": "Functions",
    "section": "Sanity checks",
    "text": "Sanity checks\nTo avoid mistakes, you may want to add some basic sanity checks\n\nlogit &lt;- function(p){\n    stopifnot(p &gt; 0 & p &lt; 1)\n    log(p/(1 - p))\n}\nlogit(2)\n\nError in logit(2): p &gt; 0 & p &lt; 1 is not TRUE\n\nlogit(0.5)\n\n[1] 0"
  },
  {
    "objectID": "slides/02-functions/index.html#error-messages",
    "href": "slides/02-functions/index.html#error-messages",
    "title": "Functions",
    "section": "Error messages",
    "text": "Error messages\nOften the R messages can be quite obscure\n\nzap &lt;- function(x) if (max(x) &lt; 1e7) 0 else x\nx &lt;- c(1, 2, NA)\nzap(x)\n\nError in if (max(x) &lt; 1e+07) 0 else x: missing value where TRUE/FALSE needed\n\n\nMore helpful error message can be implemented using stop\n\nzap &lt;- function(x) {\n    if (any(is.na(x))) stop(\"missing values in x\\nare\", \n                            \" not allowed\")\n    if (max(x) &lt; 1e7) 0 else x\n}\nzap(x)\n\nError in zap(x): missing values in x\nare not allowed"
  },
  {
    "objectID": "slides/02-functions/index.html#warning-messages",
    "href": "slides/02-functions/index.html#warning-messages",
    "title": "Functions",
    "section": "Warning messages",
    "text": "Warning messages\nWarning messages should be given using warning()\n\nsafe_log2 &lt;- function(x) {\n    if (any(x == 0)) {\n        x[x == 0] &lt;- 0.1\n        warning(\"zeros replaced by 0.1\")\n    }\n    log(x, 2)\n}\nsafe_log2(0:1)\n\n[1] -3.321928  0.000000\n\n\nOther messages can be printed using message()."
  },
  {
    "objectID": "slides/02-functions/index.html#suppressing-warnings",
    "href": "slides/02-functions/index.html#suppressing-warnings",
    "title": "Functions",
    "section": "Suppressing warnings",
    "text": "Suppressing warnings\nIf a warning is expected, you may wish to suppress it\n\nlog(c(3, -1))\n\n[1] 1.098612      NaN\n\nx &lt;- suppressWarnings(log(c(3, -1)))\n\nAll warnings will be suppressed however!\nSimilarly suppressMessages() will suppress messages."
  },
  {
    "objectID": "slides/02-functions/index.html#catching-errorswarnings",
    "href": "slides/02-functions/index.html#catching-errorswarnings",
    "title": "Functions",
    "section": "Catching errors/warnings",
    "text": "Catching errors/warnings\nThe purrr package has various functions to catch issues.\npossibly() lets you modify a function to return a specified value when there is an error\n\nlog(\"a\")\n\nError in log(\"a\"): non-numeric argument to mathematical function\n\nlibrary(purrr)\nposs_log &lt;- possibly(log, otherwise = NA)\nposs_log(\"a\")\n\n[1] NA\n\n\nsafely() works in a similar way but returns a list with elements \"result\" and \"error\", so you can record the error message(s).\nquietly() lets you modify a function to return printed output, warnings and messages along with the result."
  },
  {
    "objectID": "slides/02-functions/index.html#traceback",
    "href": "slides/02-functions/index.html#traceback",
    "title": "Functions",
    "section": "traceback()",
    "text": "traceback()\nWhen an unexpected error occurs, there are several ways to track down the source of the error, e.g. traceback()\n\nf1 &lt;- function(x){ f2(x) }\nf2 &lt;- function(x){ x + qqqq }\nf1(10)\n\nError in f2(x): object 'qqqq' not found\n\n\n\ntraceback()\n\n\n\n2: f2(2) at #1\n1: f1(10)"
  },
  {
    "objectID": "slides/02-functions/index.html#traceback-in-rstudio",
    "href": "slides/02-functions/index.html#traceback-in-rstudio",
    "title": "Functions",
    "section": "traceback() in RStudio",
    "text": "traceback() in RStudio\nIn RStudio, if Debug &gt; On Error &gt;  Error Inspector is checked and the traceback has at least 3 calls, the option to show traceback is presented\n\nf1 &lt;- function(x){ f2(x) }\nf2 &lt;- function(x){ f3(x) }\nf3 &lt;- function(x){ x + qqqq }\nf1(10)\n\nError in f3(x): object 'qqqq' not found\n\n\n\nRStudio error inspector giving options to show traceback or rerun with debug\nNote here about the importance of separating tasks into smaller functions - easier to debug!"
  },
  {
    "objectID": "slides/02-functions/index.html#debugonce",
    "href": "slides/02-functions/index.html#debugonce",
    "title": "Functions",
    "section": "debugonce()",
    "text": "debugonce()\ndebugonce() flags a function for debugging the next time it is called\n\ndebugonce(f2)\nf1(10)\n\nError in f3(x): object 'qqqq' not found\n\n\n\n\ndebugging in: f2(2)\ndebug at #1: {\n    x + qqqq\n}\nBrowse[2]&gt; ls()\n[1] \"x\"\nBrowse[2]&gt; Q\n\n\nWhen in debug mode type n or ↵ to step to the next line and c to continue to the end of a loop or the end of the function."
  },
  {
    "objectID": "slides/02-functions/index.html#breakpoints",
    "href": "slides/02-functions/index.html#breakpoints",
    "title": "Functions",
    "section": "Breakpoints",
    "text": "Breakpoints\nStepping through a function line by line can be tedious. In RStudio we can set custom breakpoints in the source pane\n\n\nSet breakpoint in RStudio \n\nSource the code"
  },
  {
    "objectID": "slides/02-functions/index.html#start-debugging-from-breakpoints",
    "href": "slides/02-functions/index.html#start-debugging-from-breakpoints",
    "title": "Functions",
    "section": "Start debugging from breakpoints",
    "text": "Start debugging from breakpoints\n\n\nhere::here()\n\n[1] \"/Users/u2175871/Library/CloudStorage/OneDrive-UniversityofWarwick/Rprojs/Mine/advanced-r-packages\"\n\n\n\nn is automatically printed, so the first prompt is at the breakpoint"
  },
  {
    "objectID": "slides/02-functions/index.html#rstudios-rerun-with-debug",
    "href": "slides/02-functions/index.html#rstudios-rerun-with-debug",
    "title": "Functions",
    "section": "RStudio’s Rerun with Debug",
    "text": "RStudio’s Rerun with Debug\nThe Rerun with Debug option will rerun the command that created the error and enter debug mode where the error occurred.\nGood points:\n\nEasy to enter debug mode (when option shown)\nCan click in Traceback pane to view objects at any point in the call stack\n\nBad points:\n\nMay have gone past source of error (use breakpoints instead)\nMay enter deeply nested function: use recover() to select an earlier entry point\n\nAlternatively use options(error = recover), run code to debug, then set options(error = NULL)."
  },
  {
    "objectID": "slides/02-functions/index.html#exercise-3",
    "href": "slides/02-functions/index.html#exercise-3",
    "title": "Functions",
    "section": "Exercise 3",
    "text": "Exercise 3\nOpen debug_practice.R and source the function f().\nTry to run f(10) - there’s an error! Use traceback() to see which function call generated the error, then fix the problem.\nRun f(10) again - there is another error! Can you fix this directly given the error message?\nTry running f(1) - is the result what you expected? Use debugonce() to set debugging on f() and re-run f(1). Step through the function, printing each object as it is created to see what is happening.\nCan you think how to improve the function? See if you can modify the function to give a sensible result for any integer."
  },
  {
    "objectID": "slides/02-functions/index.html#references",
    "href": "slides/02-functions/index.html#references",
    "title": "Functions",
    "section": "References",
    "text": "References\n\nFunctions chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/functions.html\nDebugging chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/debugging.html\nDebugging from the RStudio User Guide\nhttps://docs.posit.co/ide/user/ide/guide/code/debugging.html"
  },
  {
    "objectID": "slides/02-functions/index.html#license",
    "href": "slides/02-functions/index.html#license",
    "title": "Functions",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/02-functions/index.html#documenting-functions",
    "href": "slides/02-functions/index.html#documenting-functions",
    "title": "Functions",
    "section": "Documenting functions",
    "text": "Documenting functions\nComments help to record what a function does\n\n# reorder x by grouping variable g\ngroupSort &lt;- function(x, g) {\n    ord &lt;- order(g) #indices for ascending order of g\n    x[ord]\n}\n\nThe docstring package enables roxygen comments to be turned into a help file\n\nlibrary(docstring)\ngroupSort &lt;- function(x, g) {\n    #' Reorder a Vector by a Grouping Variable\n    #'\n    #' @param x a vector\n    #' @param g a grouping variable\n    ord &lt;- order(g) #indices for ascending order of g\n    x[ord]\n}"
  },
  {
    "objectID": "slides/02-functions/index.html#view-the-help-file-as-usual",
    "href": "slides/02-functions/index.html#view-the-help-file-as-usual",
    "title": "Functions",
    "section": "View the help file as usual",
    "text": "View the help file as usual\n\n?groupSort\n\n\nHTML documentation generated by docstringFor fuller documentation, see the docstring vignette.\nADD LINK TO VIGNETTE"
  },
  {
    "objectID": "slides/02-functions/index.html#roxygen",
    "href": "slides/02-functions/index.html#roxygen",
    "title": "Functions",
    "section": "roxygen",
    "text": "roxygen\nADD A SLIDE WITH SOME RESOURCES ABOUT ROXYGEN"
  },
  {
    "objectID": "slides/02-functions/index.html#validation",
    "href": "slides/02-functions/index.html#validation",
    "title": "Functions",
    "section": "Validation",
    "text": "Validation\nWhen developing a function, we will want to validate its output.\nA simple approach is to try different inputs\n\nlog_2 &lt;- function(x){\n    log(x, 2)\n}\nlog_2(2^2)\n\n[1] 2\n\nlog_2(2^0)\n\n[1] 0\n\n\nDoing this each time we change the function becomes tedious to check and error-prone as we miss important tests."
  },
  {
    "objectID": "slides/02-functions/index.html#unit-testing",
    "href": "slides/02-functions/index.html#unit-testing",
    "title": "Functions",
    "section": "Unit testing",
    "text": "Unit testing\nThe testthat packages allows us to create a test suite:\nADD LINK\n\ncontext(\"log_2 works correctly\")\n\ntest_that(\"log_2 returns log to base 2\", {\n    expect_equal(log_2(2^3), 3)\n    expect_equal(log_2(2^0), 0)\n})\n\ntest_that(\"negative values give error\", {\n    expect_error(log_2(2^-1))\n})"
  },
  {
    "objectID": "slides/02-functions/index.html#running-tests",
    "href": "slides/02-functions/index.html#running-tests",
    "title": "Functions",
    "section": "Running tests",
    "text": "Running tests\nIf we save the tests in a file, e.g. tests.R, we can use test_file() to run and check all tests:\n\nlibrary(testthat)\ntest_file(\"tests.R\")\n\n\n\n√ | OK F W S | Context\nx |  2 1     | log_2 works correctly\n--------------------------------------------------------------------------------\ntests.R:9: failure: negative values give error\n`log_2(2^-1)` did not throw an error.\n--------------------------------------------------------------------------------\n\n== Results =====================================================================\nOK:       2\nFailed:   1\nWarnings: 0\nSkipped:  0"
  },
  {
    "objectID": "slides/02-functions/index.html#your-turn",
    "href": "slides/02-functions/index.html#your-turn",
    "title": "Functions",
    "section": "Your turn!",
    "text": "Your turn!\nCopy the qq function to a new R script and save as functions.R. Add roxygen comments at the start of the function body to define a title and parameter documentation.\nRun the documentation chunk of exercises.Rmd to view your documentation.\nOpen the tests.R script. Using expect_equal add some tests for the following\n\na sample of 100,000 from N(0, 1) gives approximately slope 1, intercept 0\na sample of 100,000 from N(0, 1/2) gives approximately slope 2, intercept 0\nsample of 100,000 from N(2, 1) gives approximately slope 1, intercept -2\n\nUse the tol argument in expect_equal to set a tolerance of 0.01.\nRun the tests chunk of exercises.Rmd to run your tests with test_file. Try changing the expected tolerance to get a test to fail."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Monday June 19th\n\n\n\nTime\nSession\n\n\n\n\n11:00–11:10\nWelcome and introduction\n\n\n11:10–12:30\nAdvanced R: Functions\n\n\n12:30–13:30\nLunch\n\n\n13:30–15:00\nAdvanced R: Classes and methods\n\n\n15:00–15:30\nCoffee break\n\n\n15:30–17:00\nAdvanced R: Efficient programming\n\n\n\n\n\nTuesday June 20th\n\n\n\nTime\nSession\n\n\n\n\n9:30–10:30\nAdvanced R: Profiling\n\n\n10:30–11:00\nCoffee break\n\n\n11:00–12:30\nAdvanced R: C++ and Rcpp\n\n\n12:30–13:30\nLunch\n\n\n13:30–15:00\nR Packages: Package foundations\n\n\n15:00–15:30\nCoffee break\n\n\n15:30–17:00\nR Packages: Documentation\n\n\n\n\n\nWednesday June 21st\n\n\n\nTime\nSession\n\n\n\n\n9:30–10:30\nR Packages: Testing\n\n\n10:30–11:00\nCoffee break\n\n\n11:00–12:30\nR Packages: Check and package documentation\n\n\n12:30–13:30\nLunch\n\n\n13:30–15:00\nR Packages: Packaging data; publication and maintenance\n\n\n15:00–15:30\nCoffee break\n\n\n15:30–17:00\nR Packages: Rcpp"
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nJun 19, 2023\n\n\nWelcome and introduction\n\n\n\n\nJun 19, 2023\n\n\nAdvanced R: Functions\n\n\n\n\nJun 19, 2023\n\n\nAdvanced R: Classes and methods\n\n\n\n\nJun 19, 2023\n\n\nAdvanced R: Efficient programming\n\n\n\n\nJun 20, 2023\n\n\nAdvanced R: Profiling\n\n\n\n\nJun 20, 2023\n\n\nAdvanced R: C++ and Rcpp\n\n\n\n\nJun 20, 2023\n\n\nR Packages: Package foundations\n\n\n\n\nJun 20, 2023\n\n\nR Packages: Documentation\n\n\n\n\nJun 21, 2023\n\n\nR Packages: Testing\n\n\n\n\nJun 21, 2023\n\n\nR Packages: Check and package documentation\n\n\n\n\nJun 21, 2023\n\n\nR Packages: Packaging data; publication and maintenance\n\n\n\n\nJun 21, 2023\n\n\nR Packages: Rcpp\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advanced R and R Packages Workshop",
    "section": "",
    "text": "Welcome to the website for the Advanced R and R Packages Workshop.\nThis is a three-day workshop, taking place at The University of Warwick, June 19th-21st, 2023.\nIt is aimed primarily at graduate students in the Department of Statistics, but open to all interested members of the university, space permitting. For more details on how to register, see the join page."
  },
  {
    "objectID": "index.html#syllabus-overview",
    "href": "index.html#syllabus-overview",
    "title": "Advanced R and R Packages Workshop",
    "section": "Syllabus overview",
    "text": "Syllabus overview\nThe Advanced R sections of the workshop covers functions, classes and methods, efficient programming, profiling, C++ and Rcpp.\nThe R Packages sections of the workshop covers the entire process of creating a package, including data, checking and testing, all levels of documentation, publication and maintenance. The final session covers the advanced topic of using Rcpp code in a package.\nFor more details, see the content page."
  },
  {
    "objectID": "index.html#session-details",
    "href": "index.html#session-details",
    "title": "Advanced R and R Packages Workshop",
    "section": "Session details",
    "text": "Session details\n   June 19th-21st, 2023\n   Room OC1.02, The Oculus, University of Warwick\n   Lunch provided each day\n   See the full schedule."
  },
  {
    "objectID": "index.html#instructor-details",
    "href": "index.html#instructor-details",
    "title": "Advanced R and R Packages Workshop",
    "section": "Instructor details",
    "text": "Instructor details\n   Ella Kaye and Heather Turner\n   ella.m.kaye@warwick.ac.uk and h.turner.1@warwick.ac.uk"
  },
  {
    "objectID": "index.html#prerequistes",
    "href": "index.html#prerequistes",
    "title": "Advanced R and R Packages Workshop",
    "section": "Prerequistes",
    "text": "Prerequistes\nPlease see the prerequisites page for details on getting set up in advance of the workshop."
  },
  {
    "objectID": "join.html",
    "href": "join.html",
    "title": "Join the workshop",
    "section": "",
    "text": "This course is aimed primarily at graduate students in the Department of Statistics at the University of Warwick. It is also open to 3rd and 4th year undergraduate students and members of staff in the Department of Statistics.\nSpace permitting, the workshop is also open to all interested members of the University of Warwick.\nTo express your interest in joining the workshop, please fill in the form, linked below (it may take a moment to load).\nPlease sign-up by June 11th. Places will be confirmed by e-mail by June 12th."
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an advanced R course, so basic knowledge of R is expected.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R\n\nMembers of the University of Warwick can have access to video recordings of these sessions being taught online in Autumn Term 2022. Please contact ella.m.kaye@warwick.ac.uk to be sent the links."
  },
  {
    "objectID": "prerequisites.html#prior-knowledge",
    "href": "prerequisites.html#prior-knowledge",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an advanced R course, so basic knowledge of R is expected.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R\n\nMembers of the University of Warwick can have access to video recordings of these sessions being taught online in Autumn Term 2022. Please contact ella.m.kaye@warwick.ac.uk to be sent the links."
  },
  {
    "objectID": "prerequisites.html#git-and-github",
    "href": "prerequisites.html#git-and-github",
    "title": "Prerequisites",
    "section": "git and GitHub",
    "text": "git and GitHub\nAlthough there will be some time dedicated to this in the workshop, it would be advantageous if you already have:\n\ngit installed on your computer. See https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\na GitHub account\na GitHub PAT configured to work with RStudio\n\nThe git and GitHub material from a previous version of this workshop walks through the setup."
  },
  {
    "objectID": "prerequisites.html#r-and-rstudio",
    "href": "prerequisites.html#r-and-rstudio",
    "title": "Prerequisites",
    "section": "R and RStudio",
    "text": "R and RStudio\nPlease ensure that you have up-to-date versions of R and RStudio installed prior to the first session. If you are on MacOS/Linux or a self-managed Windows laptop, install the latest versions, currently R-4.3.0 and RStudio-2023.03.1.\nWe also strongly recommend all participants to install the development tools to avoid potential issues installing packages.\n\nITS Managed Windows Machines\nR and RStudio are available on student computers (via Start, All Programs) and also staff computers (via Start, All Programs, Software Center).\n\n\nInstalling R\nDownload the pre-compiled binary for your OS from https://cloud.r-project.org/ and install. More specifically:\nFor Windows\nClick “Download R for Windows”, then “base”, then “Download R-4.3.0 for Windows”. This will download an .exe file; once downloaded, open to start the installation.\nFor Mac\nClick “Download R for macOS”, then “R-4.3.0-arm64.pkg” (the first option) to download the installer for Macs with Apple Silicon chips or “R-4.3.0-x86_64.pkg” (the second option) to download the installer for Macs with Intel chips. Run the installer to complete installation.\nFor Linux\nClick “Download R for Linux”. Instructions on installing are given for Debian, Fedora, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\n\n\nInstalling R Studio Desktop (Open Source Edition)\nDownloads are available from https://posit.co/download/rstudio-desktop/#download\nDownload the relevant installer either under the “Install RStudio” header or, scrolling down the page, from the ‘All installers and Tarballs’ section. Run the installer to complete installation.\n\n\nDevelopment Tools\nSome additional tools may be required to compile R packages from source.\nFor Windows\nNOTE: This does not require admin rights.\nDownload the Rtools installer that matches your version of R from https://cran.r-project.org/bin/windows/Rtools/. Run the installer, Rtools.exe, keeping the default settings.\nFor Mac\nInstall Command Line Tools.\nEither:\n\nDownload and install XCode from the Mac AppStore: http://itunes.apple.com/us/app/xcode/id497799835?mt=12\nWithin XCode go to Preferences -&gt; Downloads and install the Command Line Tools\n\nOr for a smaller download size:\n\nRegister as an Apple Developer (free) here: https://developer.apple.com/programs/register/\nDownload the Command Line Tools for XCode appropriate for the version of OS X you are running from here: https://developer.apple.com/downloads/\n\nFor Linux\nIf you installed r-base-dev, when installing R, you should have all you need to build packages from source. Otherwise return to the instructions for installing R for your distribution and follow the instructions there to install the additional tools."
  },
  {
    "objectID": "content/12-Rcpp-packages/index.html",
    "href": "content/12-Rcpp-packages/index.html",
    "title": "R Packages: Rcpp",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/12-Rcpp-packages/index.html#slides",
    "href": "content/12-Rcpp-packages/index.html#slides",
    "title": "R Packages: Rcpp",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/12-Rcpp-packages/index.html#resources",
    "href": "content/12-Rcpp-packages/index.html#resources",
    "title": "R Packages: Rcpp",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/09-testing/index.html",
    "href": "content/09-testing/index.html",
    "title": "R Packages: Testing",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/09-testing/index.html#slides",
    "href": "content/09-testing/index.html#slides",
    "title": "R Packages: Testing",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/09-testing/index.html#resources",
    "href": "content/09-testing/index.html#resources",
    "title": "R Packages: Testing",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/11-data-publication-maintenance/index.html",
    "href": "content/11-data-publication-maintenance/index.html",
    "title": "R Packages: Packaging data; publication and maintenance",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/11-data-publication-maintenance/index.html#slides",
    "href": "content/11-data-publication-maintenance/index.html#slides",
    "title": "R Packages: Packaging data; publication and maintenance",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/11-data-publication-maintenance/index.html#resources",
    "href": "content/11-data-publication-maintenance/index.html#resources",
    "title": "R Packages: Packaging data; publication and maintenance",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/08-documentation/index.html",
    "href": "content/08-documentation/index.html",
    "title": "R Packages: Documentation",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/08-documentation/index.html#slides",
    "href": "content/08-documentation/index.html#slides",
    "title": "R Packages: Documentation",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/08-documentation/index.html#resources",
    "href": "content/08-documentation/index.html#resources",
    "title": "R Packages: Documentation",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/03-classes-methods/index.html",
    "href": "content/03-classes-methods/index.html",
    "title": "Advanced R: Classes and methods",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-classes-methods/index.html#slides",
    "href": "content/03-classes-methods/index.html#slides",
    "title": "Advanced R: Classes and methods",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-classes-methods/index.html#resources",
    "href": "content/03-classes-methods/index.html#resources",
    "title": "Advanced R: Classes and methods",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nMain reference for this section, goes a bit further (including R6): Wickham, H, Advanced R (2nd edn), Object-oriented programming section\n\nhttps://adv-r.hadley.nz/oo.html\n\nFun example creating Turtle and TurtleWithPen classes to create simple graphics by moving the turtle\nhttps://stuartlee.org/2019/07/09/s4-short-guide/"
  },
  {
    "objectID": "content/04-efficient-programming/index.html",
    "href": "content/04-efficient-programming/index.html",
    "title": "Advanced R: Efficient programming",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-efficient-programming/index.html#slides",
    "href": "content/04-efficient-programming/index.html#slides",
    "title": "Advanced R: Efficient programming",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-efficient-programming/index.html#resources",
    "href": "content/04-efficient-programming/index.html#resources",
    "title": "Advanced R: Efficient programming",
    "section": "Resources",
    "text": "Resources\n\nReading\nGood references on optimizing R code:\n\nWickham, H, Advanced R (2nd edn), Improving performance section, https://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming, https://csgillespie.github.io/efficientR/\n\nTutorials on the Futureverse:\n\nhttps://www.futureverse.org/tutorials.html\n\n\n\nPackages\n\nefficient\nhttps://github.com/csgillespie/efficient\nfuture and future.apply from the Futureverse\nhttps://future.futureverse.org\nhttps://future.apply.futureverse.org"
  },
  {
    "objectID": "content/06-r-with-cpp/index.html",
    "href": "content/06-r-with-cpp/index.html",
    "title": "Advanced R: C++ and Rcpp",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/06-r-with-cpp/index.html#slides",
    "href": "content/06-r-with-cpp/index.html#slides",
    "title": "Advanced R: C++ and Rcpp",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/06-r-with-cpp/index.html#resources",
    "href": "content/06-r-with-cpp/index.html#resources",
    "title": "Advanced R: C++ and Rcpp",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nSimilar scope to this module: Gillespie, C and Lovelace, R, Efficient R programming, Rcpp section\nhttps://csgillespie.github.io/efficientR/performance.html#rcpp\nGoing a bit further: Wickham, H, Advanced R (2nd edn), Rewriting R code in C++ chapter\nhttps://adv-r.hadley.nz/rcpp.html\nNot very polished, but broader coverage of Rcpp functionality: Tsuda, M.E., Rcpp for everyone\nhttps://teuder.github.io/rcpp4everyone_en/300_Rmath.html\nThe Rcpp vignettes, accessed via browseVignettes(\"Rcpp\") or CRAN\nThe unofficial Rcpp API documentation\nCase studies (optimising by improving R code and/or using C++)\n\nhttps://robotwealth.com/optimising-the-rsims-package-for-fast-backtesting-in-r/\nhttps://gallery.rcpp.org/articles/bayesian-time-series-changepoint/\nThe Rcpp Gallery has all sorts of examples, many illustrating advanced features of Rcpp).\n\n\n\n\nPackages\n\nRcpp\n\nhttps://www.rcpp.org\nhttps://github.com/RcppCore/Rcpp\nhttps://dirk.eddelbuettel.com/code/rcpp.html"
  },
  {
    "objectID": "content/01-welcome/index.html",
    "href": "content/01-welcome/index.html",
    "title": "Welcome and introduction",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/01-welcome/index.html#slides",
    "href": "content/01-welcome/index.html#slides",
    "title": "Welcome and introduction",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-welcome/index.html#resources",
    "href": "content/01-welcome/index.html#resources",
    "title": "Welcome and introduction",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/10-check-package-documentation/index.html",
    "href": "content/10-check-package-documentation/index.html",
    "title": "R Packages: Check and package documentation",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/10-check-package-documentation/index.html#slides",
    "href": "content/10-check-package-documentation/index.html#slides",
    "title": "R Packages: Check and package documentation",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/10-check-package-documentation/index.html#resources",
    "href": "content/10-check-package-documentation/index.html#resources",
    "title": "R Packages: Check and package documentation",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/05-profiling/index.html",
    "href": "content/05-profiling/index.html",
    "title": "Advanced R: Profiling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-profiling/index.html#slides",
    "href": "content/05-profiling/index.html#slides",
    "title": "Advanced R: Profiling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-profiling/index.html#resources",
    "href": "content/05-profiling/index.html#resources",
    "title": "Advanced R: Profiling",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nWickham, H, Advanced R (2nd edn), Improving performance section\nhttps://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming\nhttps://csgillespie.github.io/efficientR/\n\n\n\nPackages\n\nprofvis\nhttps://rstudio.github.io/profvis/"
  },
  {
    "objectID": "content/07-package-foundations/index.html",
    "href": "content/07-package-foundations/index.html",
    "title": "R Packages: Package foundations",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/07-package-foundations/index.html#slides",
    "href": "content/07-package-foundations/index.html#slides",
    "title": "R Packages: Package foundations",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/07-package-foundations/index.html#resources",
    "href": "content/07-package-foundations/index.html#resources",
    "title": "R Packages: Package foundations",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/02-functions/index.html",
    "href": "content/02-functions/index.html",
    "title": "Advanced R: Functions",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-functions/index.html#slides",
    "href": "content/02-functions/index.html#slides",
    "title": "Advanced R: Functions",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-functions/index.html#resources",
    "href": "content/02-functions/index.html#resources",
    "title": "Advanced R: Functions",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nFunctions chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/functions.html\nDebugging chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/debugging.html\nDebugging from the RStudio User Guide\nhttps://docs.posit.co/ide/user/ide/guide/code/debugging.html"
  }
]